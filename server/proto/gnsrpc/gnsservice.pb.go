// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.19.4
// source: proto/gnsservice.proto

package gnsrpc

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CardStatus_ConnectionType int32

const (
	CardStatus_USB CardStatus_ConnectionType = 0
	CardStatus_NFC CardStatus_ConnectionType = 1
)

// Enum value maps for CardStatus_ConnectionType.
var (
	CardStatus_ConnectionType_name = map[int32]string{
		0: "USB",
		1: "NFC",
	}
	CardStatus_ConnectionType_value = map[string]int32{
		"USB": 0,
		"NFC": 1,
	}
)

func (x CardStatus_ConnectionType) Enum() *CardStatus_ConnectionType {
	p := new(CardStatus_ConnectionType)
	*p = x
	return p
}

func (x CardStatus_ConnectionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CardStatus_ConnectionType) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_gnsservice_proto_enumTypes[0].Descriptor()
}

func (CardStatus_ConnectionType) Type() protoreflect.EnumType {
	return &file_proto_gnsservice_proto_enumTypes[0]
}

func (x CardStatus_ConnectionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CardStatus_ConnectionType.Descriptor instead.
func (CardStatus_ConnectionType) EnumDescriptor() ([]byte, []int) {
	return file_proto_gnsservice_proto_rawDescGZIP(), []int{7, 0}
}

type CardStatus_ConnectionStatus int32

const (
	CardStatus_Disconnected CardStatus_ConnectionStatus = 0 // Device is not visible to OS
	CardStatus_Connected    CardStatus_ConnectionStatus = 1 // Device is visible but not yet authenticated (Not in
	// unnlocked mode)
	CardStatus_Authenticated     CardStatus_ConnectionStatus = 2 // Device is authenticated aka ping-pong is successful
	CardStatus_UnlockedMode      CardStatus_ConnectionStatus = 3 // We will stop doing ping-pong to be ready to issue unlock command
	CardStatus_UnlockedModeReady CardStatus_ConnectionStatus = 4 // We are in UnlockedMode and are Connected
)

// Enum value maps for CardStatus_ConnectionStatus.
var (
	CardStatus_ConnectionStatus_name = map[int32]string{
		0: "Disconnected",
		1: "Connected",
		2: "Authenticated",
		3: "UnlockedMode",
		4: "UnlockedModeReady",
	}
	CardStatus_ConnectionStatus_value = map[string]int32{
		"Disconnected":      0,
		"Connected":         1,
		"Authenticated":     2,
		"UnlockedMode":      3,
		"UnlockedModeReady": 4,
	}
)

func (x CardStatus_ConnectionStatus) Enum() *CardStatus_ConnectionStatus {
	p := new(CardStatus_ConnectionStatus)
	*p = x
	return p
}

func (x CardStatus_ConnectionStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CardStatus_ConnectionStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_gnsservice_proto_enumTypes[1].Descriptor()
}

func (CardStatus_ConnectionStatus) Type() protoreflect.EnumType {
	return &file_proto_gnsservice_proto_enumTypes[1]
}

func (x CardStatus_ConnectionStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CardStatus_ConnectionStatus.Descriptor instead.
func (CardStatus_ConnectionStatus) EnumDescriptor() ([]byte, []int) {
	return file_proto_gnsservice_proto_rawDescGZIP(), []int{7, 1}
}

type UUID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Mode uint32 `protobuf:"varint,2,opt,name=mode,proto3" json:"mode,omitempty"`
}

func (x *UUID) Reset() {
	*x = UUID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_gnsservice_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UUID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UUID) ProtoMessage() {}

func (x *UUID) ProtoReflect() protoreflect.Message {
	mi := &file_proto_gnsservice_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UUID.ProtoReflect.Descriptor instead.
func (*UUID) Descriptor() ([]byte, []int) {
	return file_proto_gnsservice_proto_rawDescGZIP(), []int{0}
}

func (x *UUID) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *UUID) GetMode() uint32 {
	if x != nil {
		return x.Mode
	}
	return 0
}

type FreeSites struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Idx []uint32 `protobuf:"varint,1,rep,packed,name=idx,proto3" json:"idx,omitempty"`
}

func (x *FreeSites) Reset() {
	*x = FreeSites{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_gnsservice_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FreeSites) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FreeSites) ProtoMessage() {}

func (x *FreeSites) ProtoReflect() protoreflect.Message {
	mi := &file_proto_gnsservice_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FreeSites.ProtoReflect.Descriptor instead.
func (*FreeSites) Descriptor() ([]byte, []int) {
	return file_proto_gnsservice_proto_rawDescGZIP(), []int{1}
}

func (x *FreeSites) GetIdx() []uint32 {
	if x != nil {
		return x.Idx
	}
	return nil
}

type FreeWinCreds struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Idx []uint32 `protobuf:"varint,1,rep,packed,name=idx,proto3" json:"idx,omitempty"`
}

func (x *FreeWinCreds) Reset() {
	*x = FreeWinCreds{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_gnsservice_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FreeWinCreds) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FreeWinCreds) ProtoMessage() {}

func (x *FreeWinCreds) ProtoReflect() protoreflect.Message {
	mi := &file_proto_gnsservice_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FreeWinCreds.ProtoReflect.Descriptor instead.
func (*FreeWinCreds) Descriptor() ([]byte, []int) {
	return file_proto_gnsservice_proto_rawDescGZIP(), []int{2}
}

func (x *FreeWinCreds) GetIdx() []uint32 {
	if x != nil {
		return x.Idx
	}
	return nil
}

type SiteCred struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Idx      uint32 `protobuf:"varint,1,opt,name=idx,proto3" json:"idx,omitempty"`       // index 0 to 31 for USB serial;  index 1 to 24 for NFC
	Offset   uint32 `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"` // absolute byte offset of where the data is it's idx*blocklen
	Code     string `protobuf:"bytes,3,opt,name=code,proto3" json:"code,omitempty"`
	Username string `protobuf:"bytes,4,opt,name=username,proto3" json:"username,omitempty"`
	Password string `protobuf:"bytes,5,opt,name=password,proto3" json:"password,omitempty"`
	Misc     string `protobuf:"bytes,6,opt,name=misc,proto3" json:"misc,omitempty"`
}

func (x *SiteCred) Reset() {
	*x = SiteCred{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_gnsservice_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SiteCred) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SiteCred) ProtoMessage() {}

func (x *SiteCred) ProtoReflect() protoreflect.Message {
	mi := &file_proto_gnsservice_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SiteCred.ProtoReflect.Descriptor instead.
func (*SiteCred) Descriptor() ([]byte, []int) {
	return file_proto_gnsservice_proto_rawDescGZIP(), []int{3}
}

func (x *SiteCred) GetIdx() uint32 {
	if x != nil {
		return x.Idx
	}
	return 0
}

func (x *SiteCred) GetOffset() uint32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *SiteCred) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *SiteCred) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *SiteCred) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *SiteCred) GetMisc() string {
	if x != nil {
		return x.Misc
	}
	return ""
}

type Sites struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sites []*SiteCred `protobuf:"bytes,1,rep,name=sites,proto3" json:"sites,omitempty"`
}

func (x *Sites) Reset() {
	*x = Sites{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_gnsservice_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Sites) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Sites) ProtoMessage() {}

func (x *Sites) ProtoReflect() protoreflect.Message {
	mi := &file_proto_gnsservice_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Sites.ProtoReflect.Descriptor instead.
func (*Sites) Descriptor() ([]byte, []int) {
	return file_proto_gnsservice_proto_rawDescGZIP(), []int{4}
}

func (x *Sites) GetSites() []*SiteCred {
	if x != nil {
		return x.Sites
	}
	return nil
}

type WinCred struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Idx      uint32 `protobuf:"varint,1,opt,name=idx,proto3" json:"idx,omitempty"` // index 0 through 7 for USB serial; no NFC windows cred yet
	Domain   string `protobuf:"bytes,2,opt,name=domain,proto3" json:"domain,omitempty"`
	Username string `protobuf:"bytes,3,opt,name=username,proto3" json:"username,omitempty"`
	Password string `protobuf:"bytes,4,opt,name=password,proto3" json:"password,omitempty"`
}

func (x *WinCred) Reset() {
	*x = WinCred{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_gnsservice_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WinCred) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WinCred) ProtoMessage() {}

func (x *WinCred) ProtoReflect() protoreflect.Message {
	mi := &file_proto_gnsservice_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WinCred.ProtoReflect.Descriptor instead.
func (*WinCred) Descriptor() ([]byte, []int) {
	return file_proto_gnsservice_proto_rawDescGZIP(), []int{5}
}

func (x *WinCred) GetIdx() uint32 {
	if x != nil {
		return x.Idx
	}
	return 0
}

func (x *WinCred) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *WinCred) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *WinCred) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

type WinCreds struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Wincreds []*WinCred `protobuf:"bytes,1,rep,name=wincreds,proto3" json:"wincreds,omitempty"`
}

func (x *WinCreds) Reset() {
	*x = WinCreds{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_gnsservice_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WinCreds) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WinCreds) ProtoMessage() {}

func (x *WinCreds) ProtoReflect() protoreflect.Message {
	mi := &file_proto_gnsservice_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WinCreds.ProtoReflect.Descriptor instead.
func (*WinCreds) Descriptor() ([]byte, []int) {
	return file_proto_gnsservice_proto_rawDescGZIP(), []int{6}
}

func (x *WinCreds) GetWincreds() []*WinCred {
	if x != nil {
		return x.Wincreds
	}
	return nil
}

type CardStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type   CardStatus_ConnectionType   `protobuf:"varint,1,opt,name=type,proto3,enum=GNSRPC.CardStatus_ConnectionType" json:"type,omitempty"`
	Status CardStatus_ConnectionStatus `protobuf:"varint,2,opt,name=status,proto3,enum=GNSRPC.CardStatus_ConnectionStatus" json:"status,omitempty"`
}

func (x *CardStatus) Reset() {
	*x = CardStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_gnsservice_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CardStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CardStatus) ProtoMessage() {}

func (x *CardStatus) ProtoReflect() protoreflect.Message {
	mi := &file_proto_gnsservice_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CardStatus.ProtoReflect.Descriptor instead.
func (*CardStatus) Descriptor() ([]byte, []int) {
	return file_proto_gnsservice_proto_rawDescGZIP(), []int{7}
}

func (x *CardStatus) GetType() CardStatus_ConnectionType {
	if x != nil {
		return x.Type
	}
	return CardStatus_USB
}

func (x *CardStatus) GetStatus() CardStatus_ConnectionStatus {
	if x != nil {
		return x.Status
	}
	return CardStatus_Disconnected
}

type Text struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Text string `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"` // command string to send to RPC server for example to switch
}

func (x *Text) Reset() {
	*x = Text{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_gnsservice_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Text) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Text) ProtoMessage() {}

func (x *Text) ProtoReflect() protoreflect.Message {
	mi := &file_proto_gnsservice_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Text.ProtoReflect.Descriptor instead.
func (*Text) Descriptor() ([]byte, []int) {
	return file_proto_gnsservice_proto_rawDescGZIP(), []int{8}
}

func (x *Text) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

// Null param place holder
type GNSBadgeDataParam struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GNSBadgeDataParam) Reset() {
	*x = GNSBadgeDataParam{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_gnsservice_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GNSBadgeDataParam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GNSBadgeDataParam) ProtoMessage() {}

func (x *GNSBadgeDataParam) ProtoReflect() protoreflect.Message {
	mi := &file_proto_gnsservice_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GNSBadgeDataParam.ProtoReflect.Descriptor instead.
func (*GNSBadgeDataParam) Descriptor() ([]byte, []int) {
	return file_proto_gnsservice_proto_rawDescGZIP(), []int{9}
}

var File_proto_gnsservice_proto protoreflect.FileDescriptor

var file_proto_gnsservice_proto_rawDesc = []byte{
	0x0a, 0x16, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6e, 0x73, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06, 0x47, 0x4e, 0x53, 0x52, 0x50, 0x43,
	0x22, 0x2e, 0x0a, 0x04, 0x55, 0x55, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x6d, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65,
	0x22, 0x1d, 0x0a, 0x09, 0x46, 0x72, 0x65, 0x65, 0x53, 0x69, 0x74, 0x65, 0x73, 0x12, 0x10, 0x0a,
	0x03, 0x69, 0x64, 0x78, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x03, 0x69, 0x64, 0x78, 0x22,
	0x20, 0x0a, 0x0c, 0x46, 0x72, 0x65, 0x65, 0x57, 0x69, 0x6e, 0x43, 0x72, 0x65, 0x64, 0x73, 0x12,
	0x10, 0x0a, 0x03, 0x69, 0x64, 0x78, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x03, 0x69, 0x64,
	0x78, 0x22, 0x94, 0x01, 0x0a, 0x08, 0x53, 0x69, 0x74, 0x65, 0x43, 0x72, 0x65, 0x64, 0x12, 0x10,
	0x0a, 0x03, 0x69, 0x64, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x69, 0x64, 0x78,
	0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x69, 0x73, 0x63, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6d, 0x69, 0x73, 0x63, 0x22, 0x2f, 0x0a, 0x05, 0x53, 0x69, 0x74, 0x65,
	0x73, 0x12, 0x26, 0x0a, 0x05, 0x73, 0x69, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x47, 0x4e, 0x53, 0x52, 0x50, 0x43, 0x2e, 0x53, 0x69, 0x74, 0x65, 0x43, 0x72,
	0x65, 0x64, 0x52, 0x05, 0x73, 0x69, 0x74, 0x65, 0x73, 0x22, 0x6b, 0x0a, 0x07, 0x57, 0x69, 0x6e,
	0x43, 0x72, 0x65, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x03, 0x69, 0x64, 0x78, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x1a,
	0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x22, 0x37, 0x0a, 0x08, 0x57, 0x69, 0x6e, 0x43, 0x72, 0x65,
	0x64, 0x73, 0x12, 0x2b, 0x0a, 0x08, 0x77, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x64, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x47, 0x4e, 0x53, 0x52, 0x50, 0x43, 0x2e, 0x57, 0x69,
	0x6e, 0x43, 0x72, 0x65, 0x64, 0x52, 0x08, 0x77, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x64, 0x73, 0x22,
	0x95, 0x02, 0x0a, 0x0a, 0x43, 0x61, 0x72, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x35,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x47,
	0x4e, 0x53, 0x52, 0x50, 0x43, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x3b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x47, 0x4e, 0x53, 0x52, 0x50, 0x43, 0x2e, 0x43,
	0x61, 0x72, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x22, 0x22, 0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x07, 0x0a, 0x03, 0x55, 0x53, 0x42, 0x10, 0x00, 0x12, 0x07, 0x0a,
	0x03, 0x4e, 0x46, 0x43, 0x10, 0x01, 0x22, 0x6f, 0x0a, 0x10, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x10, 0x0a, 0x0c, 0x44, 0x69,
	0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x41,
	0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x10, 0x02, 0x12, 0x10,
	0x0a, 0x0c, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x10, 0x03,
	0x12, 0x15, 0x0a, 0x11, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x4d, 0x6f, 0x64, 0x65,
	0x52, 0x65, 0x61, 0x64, 0x79, 0x10, 0x04, 0x22, 0x1a, 0x0a, 0x04, 0x54, 0x65, 0x78, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74,
	0x65, 0x78, 0x74, 0x22, 0x13, 0x0a, 0x11, 0x47, 0x4e, 0x53, 0x42, 0x61, 0x64, 0x67, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x32, 0x9e, 0x08, 0x0a, 0x0c, 0x47, 0x4e, 0x53,
	0x42, 0x61, 0x64, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x35, 0x0a, 0x08, 0x52, 0x65, 0x61,
	0x64, 0x55, 0x55, 0x49, 0x44, 0x12, 0x19, 0x2e, 0x47, 0x4e, 0x53, 0x52, 0x50, 0x43, 0x2e, 0x47,
	0x4e, 0x53, 0x42, 0x61, 0x64, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x1a, 0x0c, 0x2e, 0x47, 0x4e, 0x53, 0x52, 0x50, 0x43, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x22, 0x00,
	0x12, 0x3a, 0x0a, 0x0d, 0x52, 0x65, 0x61, 0x64, 0x55, 0x55, 0x49, 0x44, 0x5a, 0x6f, 0x6e, 0x65,
	0x32, 0x12, 0x19, 0x2e, 0x47, 0x4e, 0x53, 0x52, 0x50, 0x43, 0x2e, 0x47, 0x4e, 0x53, 0x42, 0x61,
	0x64, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x1a, 0x0c, 0x2e, 0x47,
	0x4e, 0x53, 0x52, 0x50, 0x43, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x22, 0x00, 0x12, 0x43, 0x0a, 0x09,
	0x53, 0x74, 0x6f, 0x72, 0x65, 0x55, 0x55, 0x49, 0x44, 0x12, 0x19, 0x2e, 0x47, 0x4e, 0x53, 0x52,
	0x50, 0x43, 0x2e, 0x47, 0x4e, 0x53, 0x42, 0x61, 0x64, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x1a, 0x19, 0x2e, 0x47, 0x4e, 0x53, 0x52, 0x50, 0x43, 0x2e, 0x47, 0x4e,
	0x53, 0x42, 0x61, 0x64, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x22,
	0x00, 0x12, 0x37, 0x0a, 0x0a, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x43, 0x61, 0x72, 0x64, 0x12,
	0x0c, 0x2e, 0x47, 0x4e, 0x53, 0x52, 0x50, 0x43, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x1a, 0x19, 0x2e,
	0x47, 0x4e, 0x53, 0x52, 0x50, 0x43, 0x2e, 0x47, 0x4e, 0x53, 0x42, 0x61, 0x64, 0x67, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x22, 0x00, 0x12, 0x3e, 0x0a, 0x0c, 0x47, 0x65,
	0x74, 0x46, 0x72, 0x65, 0x65, 0x53, 0x69, 0x74, 0x65, 0x73, 0x12, 0x19, 0x2e, 0x47, 0x4e, 0x53,
	0x52, 0x50, 0x43, 0x2e, 0x47, 0x4e, 0x53, 0x42, 0x61, 0x64, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x1a, 0x11, 0x2e, 0x47, 0x4e, 0x53, 0x52, 0x50, 0x43, 0x2e, 0x46,
	0x72, 0x65, 0x65, 0x53, 0x69, 0x74, 0x65, 0x73, 0x22, 0x00, 0x12, 0x44, 0x0a, 0x0f, 0x47, 0x65,
	0x74, 0x46, 0x72, 0x65, 0x65, 0x57, 0x69, 0x6e, 0x43, 0x72, 0x65, 0x64, 0x73, 0x12, 0x19, 0x2e,
	0x47, 0x4e, 0x53, 0x52, 0x50, 0x43, 0x2e, 0x47, 0x4e, 0x53, 0x42, 0x61, 0x64, 0x67, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x1a, 0x14, 0x2e, 0x47, 0x4e, 0x53, 0x52, 0x50,
	0x43, 0x2e, 0x46, 0x72, 0x65, 0x65, 0x57, 0x69, 0x6e, 0x43, 0x72, 0x65, 0x64, 0x73, 0x22, 0x00,
	0x12, 0x3b, 0x0a, 0x0d, 0x52, 0x65, 0x61, 0x64, 0x53, 0x69, 0x74, 0x65, 0x43, 0x72, 0x65, 0x64,
	0x73, 0x12, 0x19, 0x2e, 0x47, 0x4e, 0x53, 0x52, 0x50, 0x43, 0x2e, 0x47, 0x4e, 0x53, 0x42, 0x61,
	0x64, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x1a, 0x0d, 0x2e, 0x47,
	0x4e, 0x53, 0x52, 0x50, 0x43, 0x2e, 0x53, 0x69, 0x74, 0x65, 0x73, 0x22, 0x00, 0x12, 0x34, 0x0a,
	0x0c, 0x52, 0x65, 0x61, 0x64, 0x53, 0x69, 0x74, 0x65, 0x43, 0x72, 0x65, 0x64, 0x12, 0x10, 0x2e,
	0x47, 0x4e, 0x53, 0x52, 0x50, 0x43, 0x2e, 0x53, 0x69, 0x74, 0x65, 0x43, 0x72, 0x65, 0x64, 0x1a,
	0x10, 0x2e, 0x47, 0x4e, 0x53, 0x52, 0x50, 0x43, 0x2e, 0x53, 0x69, 0x74, 0x65, 0x43, 0x72, 0x65,
	0x64, 0x22, 0x00, 0x12, 0x3d, 0x0a, 0x0c, 0x52, 0x65, 0x61, 0x64, 0x57, 0x69, 0x6e, 0x43, 0x72,
	0x65, 0x64, 0x73, 0x12, 0x19, 0x2e, 0x47, 0x4e, 0x53, 0x52, 0x50, 0x43, 0x2e, 0x47, 0x4e, 0x53,
	0x42, 0x61, 0x64, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x1a, 0x10,
	0x2e, 0x47, 0x4e, 0x53, 0x52, 0x50, 0x43, 0x2e, 0x57, 0x69, 0x6e, 0x43, 0x72, 0x65, 0x64, 0x73,
	0x22, 0x00, 0x12, 0x31, 0x0a, 0x0b, 0x52, 0x65, 0x61, 0x64, 0x57, 0x69, 0x6e, 0x43, 0x72, 0x65,
	0x64, 0x12, 0x0f, 0x2e, 0x47, 0x4e, 0x53, 0x52, 0x50, 0x43, 0x2e, 0x57, 0x69, 0x6e, 0x43, 0x72,
	0x65, 0x64, 0x1a, 0x0f, 0x2e, 0x47, 0x4e, 0x53, 0x52, 0x50, 0x43, 0x2e, 0x57, 0x69, 0x6e, 0x43,
	0x72, 0x65, 0x64, 0x22, 0x00, 0x12, 0x3f, 0x0a, 0x0e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53,
	0x69, 0x74, 0x65, 0x43, 0x72, 0x65, 0x64, 0x12, 0x10, 0x2e, 0x47, 0x4e, 0x53, 0x52, 0x50, 0x43,
	0x2e, 0x53, 0x69, 0x74, 0x65, 0x43, 0x72, 0x65, 0x64, 0x1a, 0x19, 0x2e, 0x47, 0x4e, 0x53, 0x52,
	0x50, 0x43, 0x2e, 0x47, 0x4e, 0x53, 0x42, 0x61, 0x64, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x22, 0x00, 0x12, 0x3d, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x57, 0x69, 0x6e, 0x43, 0x72, 0x65, 0x64, 0x12, 0x0f, 0x2e, 0x47, 0x4e, 0x53, 0x52, 0x50, 0x43,
	0x2e, 0x57, 0x69, 0x6e, 0x43, 0x72, 0x65, 0x64, 0x1a, 0x19, 0x2e, 0x47, 0x4e, 0x53, 0x52, 0x50,
	0x43, 0x2e, 0x47, 0x4e, 0x53, 0x42, 0x61, 0x64, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x22, 0x00, 0x12, 0x3e, 0x0a, 0x0d, 0x57, 0x72, 0x69, 0x74, 0x65, 0x53, 0x69,
	0x74, 0x65, 0x43, 0x72, 0x65, 0x64, 0x12, 0x10, 0x2e, 0x47, 0x4e, 0x53, 0x52, 0x50, 0x43, 0x2e,
	0x53, 0x69, 0x74, 0x65, 0x43, 0x72, 0x65, 0x64, 0x1a, 0x19, 0x2e, 0x47, 0x4e, 0x53, 0x52, 0x50,
	0x43, 0x2e, 0x47, 0x4e, 0x53, 0x42, 0x61, 0x64, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x22, 0x00, 0x12, 0x3c, 0x0a, 0x0c, 0x57, 0x72, 0x69, 0x74, 0x65, 0x57, 0x69,
	0x6e, 0x43, 0x72, 0x65, 0x64, 0x12, 0x0f, 0x2e, 0x47, 0x4e, 0x53, 0x52, 0x50, 0x43, 0x2e, 0x57,
	0x69, 0x6e, 0x43, 0x72, 0x65, 0x64, 0x1a, 0x19, 0x2e, 0x47, 0x4e, 0x53, 0x52, 0x50, 0x43, 0x2e,
	0x47, 0x4e, 0x53, 0x42, 0x61, 0x64, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x22, 0x00, 0x12, 0x45, 0x0a, 0x10, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x61, 0x72,
	0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x19, 0x2e, 0x47, 0x4e, 0x53, 0x52, 0x50, 0x43,
	0x2e, 0x47, 0x4e, 0x53, 0x42, 0x61, 0x64, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x1a, 0x12, 0x2e, 0x47, 0x4e, 0x53, 0x52, 0x50, 0x43, 0x2e, 0x43, 0x61, 0x72, 0x64,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x00, 0x30, 0x01, 0x12, 0x37, 0x0a, 0x0a, 0x55, 0x6e,
	0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x61, 0x72, 0x64, 0x12, 0x19, 0x2e, 0x47, 0x4e, 0x53, 0x52, 0x50,
	0x43, 0x2e, 0x47, 0x4e, 0x53, 0x42, 0x61, 0x64, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x1a, 0x0c, 0x2e, 0x47, 0x4e, 0x53, 0x52, 0x50, 0x43, 0x2e, 0x54, 0x65, 0x78,
	0x74, 0x22, 0x00, 0x12, 0x34, 0x0a, 0x07, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x12, 0x0c,
	0x2e, 0x47, 0x4e, 0x53, 0x52, 0x50, 0x43, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x1a, 0x19, 0x2e, 0x47,
	0x4e, 0x53, 0x52, 0x50, 0x43, 0x2e, 0x47, 0x4e, 0x53, 0x42, 0x61, 0x64, 0x67, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x22, 0x00, 0x42, 0x1c, 0x5a, 0x08, 0x2e, 0x2f, 0x67,
	0x6e, 0x73, 0x72, 0x70, 0x63, 0xa2, 0x02, 0x06, 0x47, 0x4e, 0x53, 0x52, 0x50, 0x43, 0xaa, 0x02,
	0x06, 0x47, 0x4e, 0x53, 0x52, 0x50, 0x43, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_gnsservice_proto_rawDescOnce sync.Once
	file_proto_gnsservice_proto_rawDescData = file_proto_gnsservice_proto_rawDesc
)

func file_proto_gnsservice_proto_rawDescGZIP() []byte {
	file_proto_gnsservice_proto_rawDescOnce.Do(func() {
		file_proto_gnsservice_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_gnsservice_proto_rawDescData)
	})
	return file_proto_gnsservice_proto_rawDescData
}

var file_proto_gnsservice_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_proto_gnsservice_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_proto_gnsservice_proto_goTypes = []interface{}{
	(CardStatus_ConnectionType)(0),   // 0: GNSRPC.CardStatus.ConnectionType
	(CardStatus_ConnectionStatus)(0), // 1: GNSRPC.CardStatus.ConnectionStatus
	(*UUID)(nil),                     // 2: GNSRPC.UUID
	(*FreeSites)(nil),                // 3: GNSRPC.FreeSites
	(*FreeWinCreds)(nil),             // 4: GNSRPC.FreeWinCreds
	(*SiteCred)(nil),                 // 5: GNSRPC.SiteCred
	(*Sites)(nil),                    // 6: GNSRPC.Sites
	(*WinCred)(nil),                  // 7: GNSRPC.WinCred
	(*WinCreds)(nil),                 // 8: GNSRPC.WinCreds
	(*CardStatus)(nil),               // 9: GNSRPC.CardStatus
	(*Text)(nil),                     // 10: GNSRPC.Text
	(*GNSBadgeDataParam)(nil),        // 11: GNSRPC.GNSBadgeDataParam
}
var file_proto_gnsservice_proto_depIdxs = []int32{
	5,  // 0: GNSRPC.Sites.sites:type_name -> GNSRPC.SiteCred
	7,  // 1: GNSRPC.WinCreds.wincreds:type_name -> GNSRPC.WinCred
	0,  // 2: GNSRPC.CardStatus.type:type_name -> GNSRPC.CardStatus.ConnectionType
	1,  // 3: GNSRPC.CardStatus.status:type_name -> GNSRPC.CardStatus.ConnectionStatus
	11, // 4: GNSRPC.GNSBadgeData.ReadUUID:input_type -> GNSRPC.GNSBadgeDataParam
	11, // 5: GNSRPC.GNSBadgeData.ReadUUIDZone2:input_type -> GNSRPC.GNSBadgeDataParam
	11, // 6: GNSRPC.GNSBadgeData.StoreUUID:input_type -> GNSRPC.GNSBadgeDataParam
	2,  // 7: GNSRPC.GNSBadgeData.FormatCard:input_type -> GNSRPC.UUID
	11, // 8: GNSRPC.GNSBadgeData.GetFreeSites:input_type -> GNSRPC.GNSBadgeDataParam
	11, // 9: GNSRPC.GNSBadgeData.GetFreeWinCreds:input_type -> GNSRPC.GNSBadgeDataParam
	11, // 10: GNSRPC.GNSBadgeData.ReadSiteCreds:input_type -> GNSRPC.GNSBadgeDataParam
	5,  // 11: GNSRPC.GNSBadgeData.ReadSiteCred:input_type -> GNSRPC.SiteCred
	11, // 12: GNSRPC.GNSBadgeData.ReadWinCreds:input_type -> GNSRPC.GNSBadgeDataParam
	7,  // 13: GNSRPC.GNSBadgeData.ReadWinCred:input_type -> GNSRPC.WinCred
	5,  // 14: GNSRPC.GNSBadgeData.DeleteSiteCred:input_type -> GNSRPC.SiteCred
	7,  // 15: GNSRPC.GNSBadgeData.DeleteWinCred:input_type -> GNSRPC.WinCred
	5,  // 16: GNSRPC.GNSBadgeData.WriteSiteCred:input_type -> GNSRPC.SiteCred
	7,  // 17: GNSRPC.GNSBadgeData.WriteWinCred:input_type -> GNSRPC.WinCred
	11, // 18: GNSRPC.GNSBadgeData.StreamCardStatus:input_type -> GNSRPC.GNSBadgeDataParam
	11, // 19: GNSRPC.GNSBadgeData.UnlockCard:input_type -> GNSRPC.GNSBadgeDataParam
	10, // 20: GNSRPC.GNSBadgeData.Execute:input_type -> GNSRPC.Text
	2,  // 21: GNSRPC.GNSBadgeData.ReadUUID:output_type -> GNSRPC.UUID
	2,  // 22: GNSRPC.GNSBadgeData.ReadUUIDZone2:output_type -> GNSRPC.UUID
	11, // 23: GNSRPC.GNSBadgeData.StoreUUID:output_type -> GNSRPC.GNSBadgeDataParam
	11, // 24: GNSRPC.GNSBadgeData.FormatCard:output_type -> GNSRPC.GNSBadgeDataParam
	3,  // 25: GNSRPC.GNSBadgeData.GetFreeSites:output_type -> GNSRPC.FreeSites
	4,  // 26: GNSRPC.GNSBadgeData.GetFreeWinCreds:output_type -> GNSRPC.FreeWinCreds
	6,  // 27: GNSRPC.GNSBadgeData.ReadSiteCreds:output_type -> GNSRPC.Sites
	5,  // 28: GNSRPC.GNSBadgeData.ReadSiteCred:output_type -> GNSRPC.SiteCred
	8,  // 29: GNSRPC.GNSBadgeData.ReadWinCreds:output_type -> GNSRPC.WinCreds
	7,  // 30: GNSRPC.GNSBadgeData.ReadWinCred:output_type -> GNSRPC.WinCred
	11, // 31: GNSRPC.GNSBadgeData.DeleteSiteCred:output_type -> GNSRPC.GNSBadgeDataParam
	11, // 32: GNSRPC.GNSBadgeData.DeleteWinCred:output_type -> GNSRPC.GNSBadgeDataParam
	11, // 33: GNSRPC.GNSBadgeData.WriteSiteCred:output_type -> GNSRPC.GNSBadgeDataParam
	11, // 34: GNSRPC.GNSBadgeData.WriteWinCred:output_type -> GNSRPC.GNSBadgeDataParam
	9,  // 35: GNSRPC.GNSBadgeData.StreamCardStatus:output_type -> GNSRPC.CardStatus
	10, // 36: GNSRPC.GNSBadgeData.UnlockCard:output_type -> GNSRPC.Text
	11, // 37: GNSRPC.GNSBadgeData.Execute:output_type -> GNSRPC.GNSBadgeDataParam
	21, // [21:38] is the sub-list for method output_type
	4,  // [4:21] is the sub-list for method input_type
	4,  // [4:4] is the sub-list for extension type_name
	4,  // [4:4] is the sub-list for extension extendee
	0,  // [0:4] is the sub-list for field type_name
}

func init() { file_proto_gnsservice_proto_init() }
func file_proto_gnsservice_proto_init() {
	if File_proto_gnsservice_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_gnsservice_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UUID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_gnsservice_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FreeSites); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_gnsservice_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FreeWinCreds); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_gnsservice_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SiteCred); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_gnsservice_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Sites); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_gnsservice_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WinCred); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_gnsservice_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WinCreds); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_gnsservice_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CardStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_gnsservice_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Text); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_gnsservice_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GNSBadgeDataParam); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_gnsservice_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_gnsservice_proto_goTypes,
		DependencyIndexes: file_proto_gnsservice_proto_depIdxs,
		EnumInfos:         file_proto_gnsservice_proto_enumTypes,
		MessageInfos:      file_proto_gnsservice_proto_msgTypes,
	}.Build()
	File_proto_gnsservice_proto = out.File
	file_proto_gnsservice_proto_rawDesc = nil
	file_proto_gnsservice_proto_goTypes = nil
	file_proto_gnsservice_proto_depIdxs = nil
}
