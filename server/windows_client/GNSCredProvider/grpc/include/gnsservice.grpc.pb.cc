// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: gnsservice.proto

#include "gnsservice.pb.h"
#include "gnsservice.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace GNSRPC {

static const char* GNSBadgeData_method_names[] = {
  "/GNSRPC.GNSBadgeData/ReadUUID",
  "/GNSRPC.GNSBadgeData/ReadUUIDZone2",
  "/GNSRPC.GNSBadgeData/StoreUUID",
  "/GNSRPC.GNSBadgeData/FormatCard",
  "/GNSRPC.GNSBadgeData/GetFreeSites",
  "/GNSRPC.GNSBadgeData/GetFreeWinCreds",
  "/GNSRPC.GNSBadgeData/ReadSiteCreds",
  "/GNSRPC.GNSBadgeData/ReadSiteCred",
  "/GNSRPC.GNSBadgeData/ReadWinCreds",
  "/GNSRPC.GNSBadgeData/ReadWinCred",
  "/GNSRPC.GNSBadgeData/DeleteSiteCred",
  "/GNSRPC.GNSBadgeData/DeleteWinCred",
  "/GNSRPC.GNSBadgeData/WriteSiteCred",
  "/GNSRPC.GNSBadgeData/WriteWinCred",
  "/GNSRPC.GNSBadgeData/StreamCardStatus",
  "/GNSRPC.GNSBadgeData/UnlockCard",
  "/GNSRPC.GNSBadgeData/Execute",
};

std::unique_ptr< GNSBadgeData::Stub> GNSBadgeData::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< GNSBadgeData::Stub> stub(new GNSBadgeData::Stub(channel, options));
  return stub;
}

GNSBadgeData::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_ReadUUID_(GNSBadgeData_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ReadUUIDZone2_(GNSBadgeData_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_StoreUUID_(GNSBadgeData_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_FormatCard_(GNSBadgeData_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetFreeSites_(GNSBadgeData_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetFreeWinCreds_(GNSBadgeData_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ReadSiteCreds_(GNSBadgeData_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ReadSiteCred_(GNSBadgeData_method_names[7], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ReadWinCreds_(GNSBadgeData_method_names[8], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ReadWinCred_(GNSBadgeData_method_names[9], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteSiteCred_(GNSBadgeData_method_names[10], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteWinCred_(GNSBadgeData_method_names[11], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_WriteSiteCred_(GNSBadgeData_method_names[12], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_WriteWinCred_(GNSBadgeData_method_names[13], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_StreamCardStatus_(GNSBadgeData_method_names[14], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_UnlockCard_(GNSBadgeData_method_names[15], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Execute_(GNSBadgeData_method_names[16], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status GNSBadgeData::Stub::ReadUUID(::grpc::ClientContext* context, const ::GNSRPC::GNSBadgeDataParam& request, ::GNSRPC::UUID* response) {
  return ::grpc::internal::BlockingUnaryCall< ::GNSRPC::GNSBadgeDataParam, ::GNSRPC::UUID, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ReadUUID_, context, request, response);
}

void GNSBadgeData::Stub::async::ReadUUID(::grpc::ClientContext* context, const ::GNSRPC::GNSBadgeDataParam* request, ::GNSRPC::UUID* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::GNSRPC::GNSBadgeDataParam, ::GNSRPC::UUID, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ReadUUID_, context, request, response, std::move(f));
}

void GNSBadgeData::Stub::async::ReadUUID(::grpc::ClientContext* context, const ::GNSRPC::GNSBadgeDataParam* request, ::GNSRPC::UUID* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ReadUUID_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::GNSRPC::UUID>* GNSBadgeData::Stub::PrepareAsyncReadUUIDRaw(::grpc::ClientContext* context, const ::GNSRPC::GNSBadgeDataParam& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::GNSRPC::UUID, ::GNSRPC::GNSBadgeDataParam, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ReadUUID_, context, request);
}

::grpc::ClientAsyncResponseReader< ::GNSRPC::UUID>* GNSBadgeData::Stub::AsyncReadUUIDRaw(::grpc::ClientContext* context, const ::GNSRPC::GNSBadgeDataParam& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncReadUUIDRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status GNSBadgeData::Stub::ReadUUIDZone2(::grpc::ClientContext* context, const ::GNSRPC::GNSBadgeDataParam& request, ::GNSRPC::UUID* response) {
  return ::grpc::internal::BlockingUnaryCall< ::GNSRPC::GNSBadgeDataParam, ::GNSRPC::UUID, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ReadUUIDZone2_, context, request, response);
}

void GNSBadgeData::Stub::async::ReadUUIDZone2(::grpc::ClientContext* context, const ::GNSRPC::GNSBadgeDataParam* request, ::GNSRPC::UUID* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::GNSRPC::GNSBadgeDataParam, ::GNSRPC::UUID, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ReadUUIDZone2_, context, request, response, std::move(f));
}

void GNSBadgeData::Stub::async::ReadUUIDZone2(::grpc::ClientContext* context, const ::GNSRPC::GNSBadgeDataParam* request, ::GNSRPC::UUID* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ReadUUIDZone2_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::GNSRPC::UUID>* GNSBadgeData::Stub::PrepareAsyncReadUUIDZone2Raw(::grpc::ClientContext* context, const ::GNSRPC::GNSBadgeDataParam& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::GNSRPC::UUID, ::GNSRPC::GNSBadgeDataParam, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ReadUUIDZone2_, context, request);
}

::grpc::ClientAsyncResponseReader< ::GNSRPC::UUID>* GNSBadgeData::Stub::AsyncReadUUIDZone2Raw(::grpc::ClientContext* context, const ::GNSRPC::GNSBadgeDataParam& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncReadUUIDZone2Raw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status GNSBadgeData::Stub::StoreUUID(::grpc::ClientContext* context, const ::GNSRPC::GNSBadgeDataParam& request, ::GNSRPC::GNSBadgeDataParam* response) {
  return ::grpc::internal::BlockingUnaryCall< ::GNSRPC::GNSBadgeDataParam, ::GNSRPC::GNSBadgeDataParam, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_StoreUUID_, context, request, response);
}

void GNSBadgeData::Stub::async::StoreUUID(::grpc::ClientContext* context, const ::GNSRPC::GNSBadgeDataParam* request, ::GNSRPC::GNSBadgeDataParam* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::GNSRPC::GNSBadgeDataParam, ::GNSRPC::GNSBadgeDataParam, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_StoreUUID_, context, request, response, std::move(f));
}

void GNSBadgeData::Stub::async::StoreUUID(::grpc::ClientContext* context, const ::GNSRPC::GNSBadgeDataParam* request, ::GNSRPC::GNSBadgeDataParam* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_StoreUUID_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::GNSRPC::GNSBadgeDataParam>* GNSBadgeData::Stub::PrepareAsyncStoreUUIDRaw(::grpc::ClientContext* context, const ::GNSRPC::GNSBadgeDataParam& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::GNSRPC::GNSBadgeDataParam, ::GNSRPC::GNSBadgeDataParam, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_StoreUUID_, context, request);
}

::grpc::ClientAsyncResponseReader< ::GNSRPC::GNSBadgeDataParam>* GNSBadgeData::Stub::AsyncStoreUUIDRaw(::grpc::ClientContext* context, const ::GNSRPC::GNSBadgeDataParam& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncStoreUUIDRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status GNSBadgeData::Stub::FormatCard(::grpc::ClientContext* context, const ::GNSRPC::UUID& request, ::GNSRPC::GNSBadgeDataParam* response) {
  return ::grpc::internal::BlockingUnaryCall< ::GNSRPC::UUID, ::GNSRPC::GNSBadgeDataParam, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_FormatCard_, context, request, response);
}

void GNSBadgeData::Stub::async::FormatCard(::grpc::ClientContext* context, const ::GNSRPC::UUID* request, ::GNSRPC::GNSBadgeDataParam* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::GNSRPC::UUID, ::GNSRPC::GNSBadgeDataParam, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_FormatCard_, context, request, response, std::move(f));
}

void GNSBadgeData::Stub::async::FormatCard(::grpc::ClientContext* context, const ::GNSRPC::UUID* request, ::GNSRPC::GNSBadgeDataParam* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_FormatCard_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::GNSRPC::GNSBadgeDataParam>* GNSBadgeData::Stub::PrepareAsyncFormatCardRaw(::grpc::ClientContext* context, const ::GNSRPC::UUID& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::GNSRPC::GNSBadgeDataParam, ::GNSRPC::UUID, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_FormatCard_, context, request);
}

::grpc::ClientAsyncResponseReader< ::GNSRPC::GNSBadgeDataParam>* GNSBadgeData::Stub::AsyncFormatCardRaw(::grpc::ClientContext* context, const ::GNSRPC::UUID& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncFormatCardRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status GNSBadgeData::Stub::GetFreeSites(::grpc::ClientContext* context, const ::GNSRPC::GNSBadgeDataParam& request, ::GNSRPC::FreeSites* response) {
  return ::grpc::internal::BlockingUnaryCall< ::GNSRPC::GNSBadgeDataParam, ::GNSRPC::FreeSites, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetFreeSites_, context, request, response);
}

void GNSBadgeData::Stub::async::GetFreeSites(::grpc::ClientContext* context, const ::GNSRPC::GNSBadgeDataParam* request, ::GNSRPC::FreeSites* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::GNSRPC::GNSBadgeDataParam, ::GNSRPC::FreeSites, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetFreeSites_, context, request, response, std::move(f));
}

void GNSBadgeData::Stub::async::GetFreeSites(::grpc::ClientContext* context, const ::GNSRPC::GNSBadgeDataParam* request, ::GNSRPC::FreeSites* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetFreeSites_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::GNSRPC::FreeSites>* GNSBadgeData::Stub::PrepareAsyncGetFreeSitesRaw(::grpc::ClientContext* context, const ::GNSRPC::GNSBadgeDataParam& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::GNSRPC::FreeSites, ::GNSRPC::GNSBadgeDataParam, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetFreeSites_, context, request);
}

::grpc::ClientAsyncResponseReader< ::GNSRPC::FreeSites>* GNSBadgeData::Stub::AsyncGetFreeSitesRaw(::grpc::ClientContext* context, const ::GNSRPC::GNSBadgeDataParam& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetFreeSitesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status GNSBadgeData::Stub::GetFreeWinCreds(::grpc::ClientContext* context, const ::GNSRPC::GNSBadgeDataParam& request, ::GNSRPC::FreeWinCreds* response) {
  return ::grpc::internal::BlockingUnaryCall< ::GNSRPC::GNSBadgeDataParam, ::GNSRPC::FreeWinCreds, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetFreeWinCreds_, context, request, response);
}

void GNSBadgeData::Stub::async::GetFreeWinCreds(::grpc::ClientContext* context, const ::GNSRPC::GNSBadgeDataParam* request, ::GNSRPC::FreeWinCreds* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::GNSRPC::GNSBadgeDataParam, ::GNSRPC::FreeWinCreds, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetFreeWinCreds_, context, request, response, std::move(f));
}

void GNSBadgeData::Stub::async::GetFreeWinCreds(::grpc::ClientContext* context, const ::GNSRPC::GNSBadgeDataParam* request, ::GNSRPC::FreeWinCreds* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetFreeWinCreds_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::GNSRPC::FreeWinCreds>* GNSBadgeData::Stub::PrepareAsyncGetFreeWinCredsRaw(::grpc::ClientContext* context, const ::GNSRPC::GNSBadgeDataParam& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::GNSRPC::FreeWinCreds, ::GNSRPC::GNSBadgeDataParam, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetFreeWinCreds_, context, request);
}

::grpc::ClientAsyncResponseReader< ::GNSRPC::FreeWinCreds>* GNSBadgeData::Stub::AsyncGetFreeWinCredsRaw(::grpc::ClientContext* context, const ::GNSRPC::GNSBadgeDataParam& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetFreeWinCredsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status GNSBadgeData::Stub::ReadSiteCreds(::grpc::ClientContext* context, const ::GNSRPC::GNSBadgeDataParam& request, ::GNSRPC::Sites* response) {
  return ::grpc::internal::BlockingUnaryCall< ::GNSRPC::GNSBadgeDataParam, ::GNSRPC::Sites, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ReadSiteCreds_, context, request, response);
}

void GNSBadgeData::Stub::async::ReadSiteCreds(::grpc::ClientContext* context, const ::GNSRPC::GNSBadgeDataParam* request, ::GNSRPC::Sites* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::GNSRPC::GNSBadgeDataParam, ::GNSRPC::Sites, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ReadSiteCreds_, context, request, response, std::move(f));
}

void GNSBadgeData::Stub::async::ReadSiteCreds(::grpc::ClientContext* context, const ::GNSRPC::GNSBadgeDataParam* request, ::GNSRPC::Sites* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ReadSiteCreds_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::GNSRPC::Sites>* GNSBadgeData::Stub::PrepareAsyncReadSiteCredsRaw(::grpc::ClientContext* context, const ::GNSRPC::GNSBadgeDataParam& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::GNSRPC::Sites, ::GNSRPC::GNSBadgeDataParam, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ReadSiteCreds_, context, request);
}

::grpc::ClientAsyncResponseReader< ::GNSRPC::Sites>* GNSBadgeData::Stub::AsyncReadSiteCredsRaw(::grpc::ClientContext* context, const ::GNSRPC::GNSBadgeDataParam& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncReadSiteCredsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status GNSBadgeData::Stub::ReadSiteCred(::grpc::ClientContext* context, const ::GNSRPC::SiteCred& request, ::GNSRPC::SiteCred* response) {
  return ::grpc::internal::BlockingUnaryCall< ::GNSRPC::SiteCred, ::GNSRPC::SiteCred, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ReadSiteCred_, context, request, response);
}

void GNSBadgeData::Stub::async::ReadSiteCred(::grpc::ClientContext* context, const ::GNSRPC::SiteCred* request, ::GNSRPC::SiteCred* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::GNSRPC::SiteCred, ::GNSRPC::SiteCred, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ReadSiteCred_, context, request, response, std::move(f));
}

void GNSBadgeData::Stub::async::ReadSiteCred(::grpc::ClientContext* context, const ::GNSRPC::SiteCred* request, ::GNSRPC::SiteCred* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ReadSiteCred_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::GNSRPC::SiteCred>* GNSBadgeData::Stub::PrepareAsyncReadSiteCredRaw(::grpc::ClientContext* context, const ::GNSRPC::SiteCred& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::GNSRPC::SiteCred, ::GNSRPC::SiteCred, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ReadSiteCred_, context, request);
}

::grpc::ClientAsyncResponseReader< ::GNSRPC::SiteCred>* GNSBadgeData::Stub::AsyncReadSiteCredRaw(::grpc::ClientContext* context, const ::GNSRPC::SiteCred& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncReadSiteCredRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status GNSBadgeData::Stub::ReadWinCreds(::grpc::ClientContext* context, const ::GNSRPC::GNSBadgeDataParam& request, ::GNSRPC::WinCreds* response) {
  return ::grpc::internal::BlockingUnaryCall< ::GNSRPC::GNSBadgeDataParam, ::GNSRPC::WinCreds, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ReadWinCreds_, context, request, response);
}

void GNSBadgeData::Stub::async::ReadWinCreds(::grpc::ClientContext* context, const ::GNSRPC::GNSBadgeDataParam* request, ::GNSRPC::WinCreds* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::GNSRPC::GNSBadgeDataParam, ::GNSRPC::WinCreds, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ReadWinCreds_, context, request, response, std::move(f));
}

void GNSBadgeData::Stub::async::ReadWinCreds(::grpc::ClientContext* context, const ::GNSRPC::GNSBadgeDataParam* request, ::GNSRPC::WinCreds* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ReadWinCreds_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::GNSRPC::WinCreds>* GNSBadgeData::Stub::PrepareAsyncReadWinCredsRaw(::grpc::ClientContext* context, const ::GNSRPC::GNSBadgeDataParam& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::GNSRPC::WinCreds, ::GNSRPC::GNSBadgeDataParam, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ReadWinCreds_, context, request);
}

::grpc::ClientAsyncResponseReader< ::GNSRPC::WinCreds>* GNSBadgeData::Stub::AsyncReadWinCredsRaw(::grpc::ClientContext* context, const ::GNSRPC::GNSBadgeDataParam& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncReadWinCredsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status GNSBadgeData::Stub::ReadWinCred(::grpc::ClientContext* context, const ::GNSRPC::WinCred& request, ::GNSRPC::WinCred* response) {
  return ::grpc::internal::BlockingUnaryCall< ::GNSRPC::WinCred, ::GNSRPC::WinCred, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ReadWinCred_, context, request, response);
}

void GNSBadgeData::Stub::async::ReadWinCred(::grpc::ClientContext* context, const ::GNSRPC::WinCred* request, ::GNSRPC::WinCred* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::GNSRPC::WinCred, ::GNSRPC::WinCred, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ReadWinCred_, context, request, response, std::move(f));
}

void GNSBadgeData::Stub::async::ReadWinCred(::grpc::ClientContext* context, const ::GNSRPC::WinCred* request, ::GNSRPC::WinCred* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ReadWinCred_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::GNSRPC::WinCred>* GNSBadgeData::Stub::PrepareAsyncReadWinCredRaw(::grpc::ClientContext* context, const ::GNSRPC::WinCred& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::GNSRPC::WinCred, ::GNSRPC::WinCred, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ReadWinCred_, context, request);
}

::grpc::ClientAsyncResponseReader< ::GNSRPC::WinCred>* GNSBadgeData::Stub::AsyncReadWinCredRaw(::grpc::ClientContext* context, const ::GNSRPC::WinCred& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncReadWinCredRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status GNSBadgeData::Stub::DeleteSiteCred(::grpc::ClientContext* context, const ::GNSRPC::SiteCred& request, ::GNSRPC::GNSBadgeDataParam* response) {
  return ::grpc::internal::BlockingUnaryCall< ::GNSRPC::SiteCred, ::GNSRPC::GNSBadgeDataParam, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DeleteSiteCred_, context, request, response);
}

void GNSBadgeData::Stub::async::DeleteSiteCred(::grpc::ClientContext* context, const ::GNSRPC::SiteCred* request, ::GNSRPC::GNSBadgeDataParam* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::GNSRPC::SiteCred, ::GNSRPC::GNSBadgeDataParam, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteSiteCred_, context, request, response, std::move(f));
}

void GNSBadgeData::Stub::async::DeleteSiteCred(::grpc::ClientContext* context, const ::GNSRPC::SiteCred* request, ::GNSRPC::GNSBadgeDataParam* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteSiteCred_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::GNSRPC::GNSBadgeDataParam>* GNSBadgeData::Stub::PrepareAsyncDeleteSiteCredRaw(::grpc::ClientContext* context, const ::GNSRPC::SiteCred& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::GNSRPC::GNSBadgeDataParam, ::GNSRPC::SiteCred, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DeleteSiteCred_, context, request);
}

::grpc::ClientAsyncResponseReader< ::GNSRPC::GNSBadgeDataParam>* GNSBadgeData::Stub::AsyncDeleteSiteCredRaw(::grpc::ClientContext* context, const ::GNSRPC::SiteCred& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDeleteSiteCredRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status GNSBadgeData::Stub::DeleteWinCred(::grpc::ClientContext* context, const ::GNSRPC::WinCred& request, ::GNSRPC::GNSBadgeDataParam* response) {
  return ::grpc::internal::BlockingUnaryCall< ::GNSRPC::WinCred, ::GNSRPC::GNSBadgeDataParam, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DeleteWinCred_, context, request, response);
}

void GNSBadgeData::Stub::async::DeleteWinCred(::grpc::ClientContext* context, const ::GNSRPC::WinCred* request, ::GNSRPC::GNSBadgeDataParam* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::GNSRPC::WinCred, ::GNSRPC::GNSBadgeDataParam, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteWinCred_, context, request, response, std::move(f));
}

void GNSBadgeData::Stub::async::DeleteWinCred(::grpc::ClientContext* context, const ::GNSRPC::WinCred* request, ::GNSRPC::GNSBadgeDataParam* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteWinCred_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::GNSRPC::GNSBadgeDataParam>* GNSBadgeData::Stub::PrepareAsyncDeleteWinCredRaw(::grpc::ClientContext* context, const ::GNSRPC::WinCred& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::GNSRPC::GNSBadgeDataParam, ::GNSRPC::WinCred, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DeleteWinCred_, context, request);
}

::grpc::ClientAsyncResponseReader< ::GNSRPC::GNSBadgeDataParam>* GNSBadgeData::Stub::AsyncDeleteWinCredRaw(::grpc::ClientContext* context, const ::GNSRPC::WinCred& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDeleteWinCredRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status GNSBadgeData::Stub::WriteSiteCred(::grpc::ClientContext* context, const ::GNSRPC::SiteCred& request, ::GNSRPC::GNSBadgeDataParam* response) {
  return ::grpc::internal::BlockingUnaryCall< ::GNSRPC::SiteCred, ::GNSRPC::GNSBadgeDataParam, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_WriteSiteCred_, context, request, response);
}

void GNSBadgeData::Stub::async::WriteSiteCred(::grpc::ClientContext* context, const ::GNSRPC::SiteCred* request, ::GNSRPC::GNSBadgeDataParam* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::GNSRPC::SiteCred, ::GNSRPC::GNSBadgeDataParam, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_WriteSiteCred_, context, request, response, std::move(f));
}

void GNSBadgeData::Stub::async::WriteSiteCred(::grpc::ClientContext* context, const ::GNSRPC::SiteCred* request, ::GNSRPC::GNSBadgeDataParam* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_WriteSiteCred_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::GNSRPC::GNSBadgeDataParam>* GNSBadgeData::Stub::PrepareAsyncWriteSiteCredRaw(::grpc::ClientContext* context, const ::GNSRPC::SiteCred& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::GNSRPC::GNSBadgeDataParam, ::GNSRPC::SiteCred, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_WriteSiteCred_, context, request);
}

::grpc::ClientAsyncResponseReader< ::GNSRPC::GNSBadgeDataParam>* GNSBadgeData::Stub::AsyncWriteSiteCredRaw(::grpc::ClientContext* context, const ::GNSRPC::SiteCred& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncWriteSiteCredRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status GNSBadgeData::Stub::WriteWinCred(::grpc::ClientContext* context, const ::GNSRPC::WinCred& request, ::GNSRPC::GNSBadgeDataParam* response) {
  return ::grpc::internal::BlockingUnaryCall< ::GNSRPC::WinCred, ::GNSRPC::GNSBadgeDataParam, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_WriteWinCred_, context, request, response);
}

void GNSBadgeData::Stub::async::WriteWinCred(::grpc::ClientContext* context, const ::GNSRPC::WinCred* request, ::GNSRPC::GNSBadgeDataParam* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::GNSRPC::WinCred, ::GNSRPC::GNSBadgeDataParam, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_WriteWinCred_, context, request, response, std::move(f));
}

void GNSBadgeData::Stub::async::WriteWinCred(::grpc::ClientContext* context, const ::GNSRPC::WinCred* request, ::GNSRPC::GNSBadgeDataParam* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_WriteWinCred_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::GNSRPC::GNSBadgeDataParam>* GNSBadgeData::Stub::PrepareAsyncWriteWinCredRaw(::grpc::ClientContext* context, const ::GNSRPC::WinCred& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::GNSRPC::GNSBadgeDataParam, ::GNSRPC::WinCred, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_WriteWinCred_, context, request);
}

::grpc::ClientAsyncResponseReader< ::GNSRPC::GNSBadgeDataParam>* GNSBadgeData::Stub::AsyncWriteWinCredRaw(::grpc::ClientContext* context, const ::GNSRPC::WinCred& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncWriteWinCredRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReader< ::GNSRPC::CardStatus>* GNSBadgeData::Stub::StreamCardStatusRaw(::grpc::ClientContext* context, const ::GNSRPC::GNSBadgeDataParam& request) {
  return ::grpc::internal::ClientReaderFactory< ::GNSRPC::CardStatus>::Create(channel_.get(), rpcmethod_StreamCardStatus_, context, request);
}

void GNSBadgeData::Stub::async::StreamCardStatus(::grpc::ClientContext* context, const ::GNSRPC::GNSBadgeDataParam* request, ::grpc::ClientReadReactor< ::GNSRPC::CardStatus>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::GNSRPC::CardStatus>::Create(stub_->channel_.get(), stub_->rpcmethod_StreamCardStatus_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::GNSRPC::CardStatus>* GNSBadgeData::Stub::AsyncStreamCardStatusRaw(::grpc::ClientContext* context, const ::GNSRPC::GNSBadgeDataParam& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::GNSRPC::CardStatus>::Create(channel_.get(), cq, rpcmethod_StreamCardStatus_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::GNSRPC::CardStatus>* GNSBadgeData::Stub::PrepareAsyncStreamCardStatusRaw(::grpc::ClientContext* context, const ::GNSRPC::GNSBadgeDataParam& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::GNSRPC::CardStatus>::Create(channel_.get(), cq, rpcmethod_StreamCardStatus_, context, request, false, nullptr);
}

::grpc::Status GNSBadgeData::Stub::UnlockCard(::grpc::ClientContext* context, const ::GNSRPC::GNSBadgeDataParam& request, ::GNSRPC::Text* response) {
  return ::grpc::internal::BlockingUnaryCall< ::GNSRPC::GNSBadgeDataParam, ::GNSRPC::Text, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UnlockCard_, context, request, response);
}

void GNSBadgeData::Stub::async::UnlockCard(::grpc::ClientContext* context, const ::GNSRPC::GNSBadgeDataParam* request, ::GNSRPC::Text* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::GNSRPC::GNSBadgeDataParam, ::GNSRPC::Text, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UnlockCard_, context, request, response, std::move(f));
}

void GNSBadgeData::Stub::async::UnlockCard(::grpc::ClientContext* context, const ::GNSRPC::GNSBadgeDataParam* request, ::GNSRPC::Text* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UnlockCard_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::GNSRPC::Text>* GNSBadgeData::Stub::PrepareAsyncUnlockCardRaw(::grpc::ClientContext* context, const ::GNSRPC::GNSBadgeDataParam& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::GNSRPC::Text, ::GNSRPC::GNSBadgeDataParam, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UnlockCard_, context, request);
}

::grpc::ClientAsyncResponseReader< ::GNSRPC::Text>* GNSBadgeData::Stub::AsyncUnlockCardRaw(::grpc::ClientContext* context, const ::GNSRPC::GNSBadgeDataParam& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUnlockCardRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status GNSBadgeData::Stub::Execute(::grpc::ClientContext* context, const ::GNSRPC::Text& request, ::GNSRPC::GNSBadgeDataParam* response) {
  return ::grpc::internal::BlockingUnaryCall< ::GNSRPC::Text, ::GNSRPC::GNSBadgeDataParam, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Execute_, context, request, response);
}

void GNSBadgeData::Stub::async::Execute(::grpc::ClientContext* context, const ::GNSRPC::Text* request, ::GNSRPC::GNSBadgeDataParam* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::GNSRPC::Text, ::GNSRPC::GNSBadgeDataParam, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Execute_, context, request, response, std::move(f));
}

void GNSBadgeData::Stub::async::Execute(::grpc::ClientContext* context, const ::GNSRPC::Text* request, ::GNSRPC::GNSBadgeDataParam* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Execute_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::GNSRPC::GNSBadgeDataParam>* GNSBadgeData::Stub::PrepareAsyncExecuteRaw(::grpc::ClientContext* context, const ::GNSRPC::Text& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::GNSRPC::GNSBadgeDataParam, ::GNSRPC::Text, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Execute_, context, request);
}

::grpc::ClientAsyncResponseReader< ::GNSRPC::GNSBadgeDataParam>* GNSBadgeData::Stub::AsyncExecuteRaw(::grpc::ClientContext* context, const ::GNSRPC::Text& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncExecuteRaw(context, request, cq);
  result->StartCall();
  return result;
}

GNSBadgeData::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GNSBadgeData_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GNSBadgeData::Service, ::GNSRPC::GNSBadgeDataParam, ::GNSRPC::UUID, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](GNSBadgeData::Service* service,
             ::grpc::ServerContext* ctx,
             const ::GNSRPC::GNSBadgeDataParam* req,
             ::GNSRPC::UUID* resp) {
               return service->ReadUUID(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GNSBadgeData_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GNSBadgeData::Service, ::GNSRPC::GNSBadgeDataParam, ::GNSRPC::UUID, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](GNSBadgeData::Service* service,
             ::grpc::ServerContext* ctx,
             const ::GNSRPC::GNSBadgeDataParam* req,
             ::GNSRPC::UUID* resp) {
               return service->ReadUUIDZone2(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GNSBadgeData_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GNSBadgeData::Service, ::GNSRPC::GNSBadgeDataParam, ::GNSRPC::GNSBadgeDataParam, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](GNSBadgeData::Service* service,
             ::grpc::ServerContext* ctx,
             const ::GNSRPC::GNSBadgeDataParam* req,
             ::GNSRPC::GNSBadgeDataParam* resp) {
               return service->StoreUUID(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GNSBadgeData_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GNSBadgeData::Service, ::GNSRPC::UUID, ::GNSRPC::GNSBadgeDataParam, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](GNSBadgeData::Service* service,
             ::grpc::ServerContext* ctx,
             const ::GNSRPC::UUID* req,
             ::GNSRPC::GNSBadgeDataParam* resp) {
               return service->FormatCard(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GNSBadgeData_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GNSBadgeData::Service, ::GNSRPC::GNSBadgeDataParam, ::GNSRPC::FreeSites, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](GNSBadgeData::Service* service,
             ::grpc::ServerContext* ctx,
             const ::GNSRPC::GNSBadgeDataParam* req,
             ::GNSRPC::FreeSites* resp) {
               return service->GetFreeSites(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GNSBadgeData_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GNSBadgeData::Service, ::GNSRPC::GNSBadgeDataParam, ::GNSRPC::FreeWinCreds, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](GNSBadgeData::Service* service,
             ::grpc::ServerContext* ctx,
             const ::GNSRPC::GNSBadgeDataParam* req,
             ::GNSRPC::FreeWinCreds* resp) {
               return service->GetFreeWinCreds(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GNSBadgeData_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GNSBadgeData::Service, ::GNSRPC::GNSBadgeDataParam, ::GNSRPC::Sites, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](GNSBadgeData::Service* service,
             ::grpc::ServerContext* ctx,
             const ::GNSRPC::GNSBadgeDataParam* req,
             ::GNSRPC::Sites* resp) {
               return service->ReadSiteCreds(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GNSBadgeData_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GNSBadgeData::Service, ::GNSRPC::SiteCred, ::GNSRPC::SiteCred, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](GNSBadgeData::Service* service,
             ::grpc::ServerContext* ctx,
             const ::GNSRPC::SiteCred* req,
             ::GNSRPC::SiteCred* resp) {
               return service->ReadSiteCred(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GNSBadgeData_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GNSBadgeData::Service, ::GNSRPC::GNSBadgeDataParam, ::GNSRPC::WinCreds, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](GNSBadgeData::Service* service,
             ::grpc::ServerContext* ctx,
             const ::GNSRPC::GNSBadgeDataParam* req,
             ::GNSRPC::WinCreds* resp) {
               return service->ReadWinCreds(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GNSBadgeData_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GNSBadgeData::Service, ::GNSRPC::WinCred, ::GNSRPC::WinCred, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](GNSBadgeData::Service* service,
             ::grpc::ServerContext* ctx,
             const ::GNSRPC::WinCred* req,
             ::GNSRPC::WinCred* resp) {
               return service->ReadWinCred(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GNSBadgeData_method_names[10],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GNSBadgeData::Service, ::GNSRPC::SiteCred, ::GNSRPC::GNSBadgeDataParam, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](GNSBadgeData::Service* service,
             ::grpc::ServerContext* ctx,
             const ::GNSRPC::SiteCred* req,
             ::GNSRPC::GNSBadgeDataParam* resp) {
               return service->DeleteSiteCred(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GNSBadgeData_method_names[11],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GNSBadgeData::Service, ::GNSRPC::WinCred, ::GNSRPC::GNSBadgeDataParam, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](GNSBadgeData::Service* service,
             ::grpc::ServerContext* ctx,
             const ::GNSRPC::WinCred* req,
             ::GNSRPC::GNSBadgeDataParam* resp) {
               return service->DeleteWinCred(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GNSBadgeData_method_names[12],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GNSBadgeData::Service, ::GNSRPC::SiteCred, ::GNSRPC::GNSBadgeDataParam, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](GNSBadgeData::Service* service,
             ::grpc::ServerContext* ctx,
             const ::GNSRPC::SiteCred* req,
             ::GNSRPC::GNSBadgeDataParam* resp) {
               return service->WriteSiteCred(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GNSBadgeData_method_names[13],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GNSBadgeData::Service, ::GNSRPC::WinCred, ::GNSRPC::GNSBadgeDataParam, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](GNSBadgeData::Service* service,
             ::grpc::ServerContext* ctx,
             const ::GNSRPC::WinCred* req,
             ::GNSRPC::GNSBadgeDataParam* resp) {
               return service->WriteWinCred(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GNSBadgeData_method_names[14],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< GNSBadgeData::Service, ::GNSRPC::GNSBadgeDataParam, ::GNSRPC::CardStatus>(
          [](GNSBadgeData::Service* service,
             ::grpc::ServerContext* ctx,
             const ::GNSRPC::GNSBadgeDataParam* req,
             ::grpc::ServerWriter<::GNSRPC::CardStatus>* writer) {
               return service->StreamCardStatus(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GNSBadgeData_method_names[15],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GNSBadgeData::Service, ::GNSRPC::GNSBadgeDataParam, ::GNSRPC::Text, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](GNSBadgeData::Service* service,
             ::grpc::ServerContext* ctx,
             const ::GNSRPC::GNSBadgeDataParam* req,
             ::GNSRPC::Text* resp) {
               return service->UnlockCard(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GNSBadgeData_method_names[16],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GNSBadgeData::Service, ::GNSRPC::Text, ::GNSRPC::GNSBadgeDataParam, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](GNSBadgeData::Service* service,
             ::grpc::ServerContext* ctx,
             const ::GNSRPC::Text* req,
             ::GNSRPC::GNSBadgeDataParam* resp) {
               return service->Execute(ctx, req, resp);
             }, this)));
}

GNSBadgeData::Service::~Service() {
}

::grpc::Status GNSBadgeData::Service::ReadUUID(::grpc::ServerContext* context, const ::GNSRPC::GNSBadgeDataParam* request, ::GNSRPC::UUID* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GNSBadgeData::Service::ReadUUIDZone2(::grpc::ServerContext* context, const ::GNSRPC::GNSBadgeDataParam* request, ::GNSRPC::UUID* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GNSBadgeData::Service::StoreUUID(::grpc::ServerContext* context, const ::GNSRPC::GNSBadgeDataParam* request, ::GNSRPC::GNSBadgeDataParam* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GNSBadgeData::Service::FormatCard(::grpc::ServerContext* context, const ::GNSRPC::UUID* request, ::GNSRPC::GNSBadgeDataParam* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GNSBadgeData::Service::GetFreeSites(::grpc::ServerContext* context, const ::GNSRPC::GNSBadgeDataParam* request, ::GNSRPC::FreeSites* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GNSBadgeData::Service::GetFreeWinCreds(::grpc::ServerContext* context, const ::GNSRPC::GNSBadgeDataParam* request, ::GNSRPC::FreeWinCreds* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GNSBadgeData::Service::ReadSiteCreds(::grpc::ServerContext* context, const ::GNSRPC::GNSBadgeDataParam* request, ::GNSRPC::Sites* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GNSBadgeData::Service::ReadSiteCred(::grpc::ServerContext* context, const ::GNSRPC::SiteCred* request, ::GNSRPC::SiteCred* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GNSBadgeData::Service::ReadWinCreds(::grpc::ServerContext* context, const ::GNSRPC::GNSBadgeDataParam* request, ::GNSRPC::WinCreds* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GNSBadgeData::Service::ReadWinCred(::grpc::ServerContext* context, const ::GNSRPC::WinCred* request, ::GNSRPC::WinCred* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GNSBadgeData::Service::DeleteSiteCred(::grpc::ServerContext* context, const ::GNSRPC::SiteCred* request, ::GNSRPC::GNSBadgeDataParam* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GNSBadgeData::Service::DeleteWinCred(::grpc::ServerContext* context, const ::GNSRPC::WinCred* request, ::GNSRPC::GNSBadgeDataParam* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GNSBadgeData::Service::WriteSiteCred(::grpc::ServerContext* context, const ::GNSRPC::SiteCred* request, ::GNSRPC::GNSBadgeDataParam* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GNSBadgeData::Service::WriteWinCred(::grpc::ServerContext* context, const ::GNSRPC::WinCred* request, ::GNSRPC::GNSBadgeDataParam* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GNSBadgeData::Service::StreamCardStatus(::grpc::ServerContext* context, const ::GNSRPC::GNSBadgeDataParam* request, ::grpc::ServerWriter< ::GNSRPC::CardStatus>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GNSBadgeData::Service::UnlockCard(::grpc::ServerContext* context, const ::GNSRPC::GNSBadgeDataParam* request, ::GNSRPC::Text* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GNSBadgeData::Service::Execute(::grpc::ServerContext* context, const ::GNSRPC::Text* request, ::GNSRPC::GNSBadgeDataParam* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace GNSRPC

