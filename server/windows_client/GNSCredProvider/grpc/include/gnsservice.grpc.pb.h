// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: gnsservice.proto
#ifndef GRPC_gnsservice_2eproto__INCLUDED
#define GRPC_gnsservice_2eproto__INCLUDED

#include "gnsservice.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace GNSRPC {

class GNSBadgeData final {
 public:
  static constexpr char const* service_full_name() {
    return "GNSRPC.GNSBadgeData";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Get HW UUID of card
    virtual ::grpc::Status ReadUUID(::grpc::ClientContext* context, const ::GNSRPC::GNSBadgeDataParam& request, ::GNSRPC::UUID* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GNSRPC::UUID>> AsyncReadUUID(::grpc::ClientContext* context, const ::GNSRPC::GNSBadgeDataParam& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GNSRPC::UUID>>(AsyncReadUUIDRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GNSRPC::UUID>> PrepareAsyncReadUUID(::grpc::ClientContext* context, const ::GNSRPC::GNSBadgeDataParam& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GNSRPC::UUID>>(PrepareAsyncReadUUIDRaw(context, request, cq));
    }
    // Get old UUID of card on Zone 2
    virtual ::grpc::Status ReadUUIDZone2(::grpc::ClientContext* context, const ::GNSRPC::GNSBadgeDataParam& request, ::GNSRPC::UUID* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GNSRPC::UUID>> AsyncReadUUIDZone2(::grpc::ClientContext* context, const ::GNSRPC::GNSBadgeDataParam& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GNSRPC::UUID>>(AsyncReadUUIDZone2Raw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GNSRPC::UUID>> PrepareAsyncReadUUIDZone2(::grpc::ClientContext* context, const ::GNSRPC::GNSBadgeDataParam& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GNSRPC::UUID>>(PrepareAsyncReadUUIDZone2Raw(context, request, cq));
    }
    // Read HW UUID then store to Zone3
    virtual ::grpc::Status StoreUUID(::grpc::ClientContext* context, const ::GNSRPC::GNSBadgeDataParam& request, ::GNSRPC::GNSBadgeDataParam* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GNSRPC::GNSBadgeDataParam>> AsyncStoreUUID(::grpc::ClientContext* context, const ::GNSRPC::GNSBadgeDataParam& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GNSRPC::GNSBadgeDataParam>>(AsyncStoreUUIDRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GNSRPC::GNSBadgeDataParam>> PrepareAsyncStoreUUID(::grpc::ClientContext* context, const ::GNSRPC::GNSBadgeDataParam& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GNSRPC::GNSBadgeDataParam>>(PrepareAsyncStoreUUIDRaw(context, request, cq));
    }
    // Format card 0: sites + wincreds, 1: sites only, 2: wincreds
    virtual ::grpc::Status FormatCard(::grpc::ClientContext* context, const ::GNSRPC::UUID& request, ::GNSRPC::GNSBadgeDataParam* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GNSRPC::GNSBadgeDataParam>> AsyncFormatCard(::grpc::ClientContext* context, const ::GNSRPC::UUID& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GNSRPC::GNSBadgeDataParam>>(AsyncFormatCardRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GNSRPC::GNSBadgeDataParam>> PrepareAsyncFormatCard(::grpc::ClientContext* context, const ::GNSRPC::UUID& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GNSRPC::GNSBadgeDataParam>>(PrepareAsyncFormatCardRaw(context, request, cq));
    }
    // Get available free indexes for sites (32 max)
    virtual ::grpc::Status GetFreeSites(::grpc::ClientContext* context, const ::GNSRPC::GNSBadgeDataParam& request, ::GNSRPC::FreeSites* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GNSRPC::FreeSites>> AsyncGetFreeSites(::grpc::ClientContext* context, const ::GNSRPC::GNSBadgeDataParam& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GNSRPC::FreeSites>>(AsyncGetFreeSitesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GNSRPC::FreeSites>> PrepareAsyncGetFreeSites(::grpc::ClientContext* context, const ::GNSRPC::GNSBadgeDataParam& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GNSRPC::FreeSites>>(PrepareAsyncGetFreeSitesRaw(context, request, cq));
    }
    // Get available windows credential (8 max)
    virtual ::grpc::Status GetFreeWinCreds(::grpc::ClientContext* context, const ::GNSRPC::GNSBadgeDataParam& request, ::GNSRPC::FreeWinCreds* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GNSRPC::FreeWinCreds>> AsyncGetFreeWinCreds(::grpc::ClientContext* context, const ::GNSRPC::GNSBadgeDataParam& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GNSRPC::FreeWinCreds>>(AsyncGetFreeWinCredsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GNSRPC::FreeWinCreds>> PrepareAsyncGetFreeWinCreds(::grpc::ClientContext* context, const ::GNSRPC::GNSBadgeDataParam& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GNSRPC::FreeWinCreds>>(PrepareAsyncGetFreeWinCredsRaw(context, request, cq));
    }
    // Read site credentials from badge
    virtual ::grpc::Status ReadSiteCreds(::grpc::ClientContext* context, const ::GNSRPC::GNSBadgeDataParam& request, ::GNSRPC::Sites* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GNSRPC::Sites>> AsyncReadSiteCreds(::grpc::ClientContext* context, const ::GNSRPC::GNSBadgeDataParam& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GNSRPC::Sites>>(AsyncReadSiteCredsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GNSRPC::Sites>> PrepareAsyncReadSiteCreds(::grpc::ClientContext* context, const ::GNSRPC::GNSBadgeDataParam& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GNSRPC::Sites>>(PrepareAsyncReadSiteCredsRaw(context, request, cq));
    }
    // read 1 site cred
    virtual ::grpc::Status ReadSiteCred(::grpc::ClientContext* context, const ::GNSRPC::SiteCred& request, ::GNSRPC::SiteCred* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GNSRPC::SiteCred>> AsyncReadSiteCred(::grpc::ClientContext* context, const ::GNSRPC::SiteCred& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GNSRPC::SiteCred>>(AsyncReadSiteCredRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GNSRPC::SiteCred>> PrepareAsyncReadSiteCred(::grpc::ClientContext* context, const ::GNSRPC::SiteCred& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GNSRPC::SiteCred>>(PrepareAsyncReadSiteCredRaw(context, request, cq));
    }
    // Read windows credentials from badge
    virtual ::grpc::Status ReadWinCreds(::grpc::ClientContext* context, const ::GNSRPC::GNSBadgeDataParam& request, ::GNSRPC::WinCreds* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GNSRPC::WinCreds>> AsyncReadWinCreds(::grpc::ClientContext* context, const ::GNSRPC::GNSBadgeDataParam& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GNSRPC::WinCreds>>(AsyncReadWinCredsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GNSRPC::WinCreds>> PrepareAsyncReadWinCreds(::grpc::ClientContext* context, const ::GNSRPC::GNSBadgeDataParam& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GNSRPC::WinCreds>>(PrepareAsyncReadWinCredsRaw(context, request, cq));
    }
    // Read 1 windows credential from badge
    virtual ::grpc::Status ReadWinCred(::grpc::ClientContext* context, const ::GNSRPC::WinCred& request, ::GNSRPC::WinCred* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GNSRPC::WinCred>> AsyncReadWinCred(::grpc::ClientContext* context, const ::GNSRPC::WinCred& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GNSRPC::WinCred>>(AsyncReadWinCredRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GNSRPC::WinCred>> PrepareAsyncReadWinCred(::grpc::ClientContext* context, const ::GNSRPC::WinCred& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GNSRPC::WinCred>>(PrepareAsyncReadWinCredRaw(context, request, cq));
    }
    // Delete 1 site credential
    virtual ::grpc::Status DeleteSiteCred(::grpc::ClientContext* context, const ::GNSRPC::SiteCred& request, ::GNSRPC::GNSBadgeDataParam* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GNSRPC::GNSBadgeDataParam>> AsyncDeleteSiteCred(::grpc::ClientContext* context, const ::GNSRPC::SiteCred& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GNSRPC::GNSBadgeDataParam>>(AsyncDeleteSiteCredRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GNSRPC::GNSBadgeDataParam>> PrepareAsyncDeleteSiteCred(::grpc::ClientContext* context, const ::GNSRPC::SiteCred& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GNSRPC::GNSBadgeDataParam>>(PrepareAsyncDeleteSiteCredRaw(context, request, cq));
    }
    // Delete 1 Windows credential
    virtual ::grpc::Status DeleteWinCred(::grpc::ClientContext* context, const ::GNSRPC::WinCred& request, ::GNSRPC::GNSBadgeDataParam* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GNSRPC::GNSBadgeDataParam>> AsyncDeleteWinCred(::grpc::ClientContext* context, const ::GNSRPC::WinCred& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GNSRPC::GNSBadgeDataParam>>(AsyncDeleteWinCredRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GNSRPC::GNSBadgeDataParam>> PrepareAsyncDeleteWinCred(::grpc::ClientContext* context, const ::GNSRPC::WinCred& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GNSRPC::GNSBadgeDataParam>>(PrepareAsyncDeleteWinCredRaw(context, request, cq));
    }
    // Write a site credential at location of offset
    virtual ::grpc::Status WriteSiteCred(::grpc::ClientContext* context, const ::GNSRPC::SiteCred& request, ::GNSRPC::GNSBadgeDataParam* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GNSRPC::GNSBadgeDataParam>> AsyncWriteSiteCred(::grpc::ClientContext* context, const ::GNSRPC::SiteCred& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GNSRPC::GNSBadgeDataParam>>(AsyncWriteSiteCredRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GNSRPC::GNSBadgeDataParam>> PrepareAsyncWriteSiteCred(::grpc::ClientContext* context, const ::GNSRPC::SiteCred& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GNSRPC::GNSBadgeDataParam>>(PrepareAsyncWriteSiteCredRaw(context, request, cq));
    }
    // Write a windows credential at location of idx
    virtual ::grpc::Status WriteWinCred(::grpc::ClientContext* context, const ::GNSRPC::WinCred& request, ::GNSRPC::GNSBadgeDataParam* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GNSRPC::GNSBadgeDataParam>> AsyncWriteWinCred(::grpc::ClientContext* context, const ::GNSRPC::WinCred& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GNSRPC::GNSBadgeDataParam>>(AsyncWriteWinCredRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GNSRPC::GNSBadgeDataParam>> PrepareAsyncWriteWinCred(::grpc::ClientContext* context, const ::GNSRPC::WinCred& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GNSRPC::GNSBadgeDataParam>>(PrepareAsyncWriteWinCredRaw(context, request, cq));
    }
    // Ping-pong like in-out data stream to report CardStatus changes to RPC
    // client
    std::unique_ptr< ::grpc::ClientReaderInterface< ::GNSRPC::CardStatus>> StreamCardStatus(::grpc::ClientContext* context, const ::GNSRPC::GNSBadgeDataParam& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::GNSRPC::CardStatus>>(StreamCardStatusRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::GNSRPC::CardStatus>> AsyncStreamCardStatus(::grpc::ClientContext* context, const ::GNSRPC::GNSBadgeDataParam& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::GNSRPC::CardStatus>>(AsyncStreamCardStatusRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::GNSRPC::CardStatus>> PrepareAsyncStreamCardStatus(::grpc::ClientContext* context, const ::GNSRPC::GNSBadgeDataParam& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::GNSRPC::CardStatus>>(PrepareAsyncStreamCardStatusRaw(context, request, cq));
    }
    // Unlock card and receive hardware UUID
    virtual ::grpc::Status UnlockCard(::grpc::ClientContext* context, const ::GNSRPC::GNSBadgeDataParam& request, ::GNSRPC::Text* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GNSRPC::Text>> AsyncUnlockCard(::grpc::ClientContext* context, const ::GNSRPC::GNSBadgeDataParam& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GNSRPC::Text>>(AsyncUnlockCardRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GNSRPC::Text>> PrepareAsyncUnlockCard(::grpc::ClientContext* context, const ::GNSRPC::GNSBadgeDataParam& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GNSRPC::Text>>(PrepareAsyncUnlockCardRaw(context, request, cq));
    }
    // arbitrary client to server command to implement commands like switching
    // between USB vs NFC
    virtual ::grpc::Status Execute(::grpc::ClientContext* context, const ::GNSRPC::Text& request, ::GNSRPC::GNSBadgeDataParam* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GNSRPC::GNSBadgeDataParam>> AsyncExecute(::grpc::ClientContext* context, const ::GNSRPC::Text& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GNSRPC::GNSBadgeDataParam>>(AsyncExecuteRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GNSRPC::GNSBadgeDataParam>> PrepareAsyncExecute(::grpc::ClientContext* context, const ::GNSRPC::Text& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GNSRPC::GNSBadgeDataParam>>(PrepareAsyncExecuteRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // Get HW UUID of card
      virtual void ReadUUID(::grpc::ClientContext* context, const ::GNSRPC::GNSBadgeDataParam* request, ::GNSRPC::UUID* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ReadUUID(::grpc::ClientContext* context, const ::GNSRPC::GNSBadgeDataParam* request, ::GNSRPC::UUID* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Get old UUID of card on Zone 2
      virtual void ReadUUIDZone2(::grpc::ClientContext* context, const ::GNSRPC::GNSBadgeDataParam* request, ::GNSRPC::UUID* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ReadUUIDZone2(::grpc::ClientContext* context, const ::GNSRPC::GNSBadgeDataParam* request, ::GNSRPC::UUID* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Read HW UUID then store to Zone3
      virtual void StoreUUID(::grpc::ClientContext* context, const ::GNSRPC::GNSBadgeDataParam* request, ::GNSRPC::GNSBadgeDataParam* response, std::function<void(::grpc::Status)>) = 0;
      virtual void StoreUUID(::grpc::ClientContext* context, const ::GNSRPC::GNSBadgeDataParam* request, ::GNSRPC::GNSBadgeDataParam* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Format card 0: sites + wincreds, 1: sites only, 2: wincreds
      virtual void FormatCard(::grpc::ClientContext* context, const ::GNSRPC::UUID* request, ::GNSRPC::GNSBadgeDataParam* response, std::function<void(::grpc::Status)>) = 0;
      virtual void FormatCard(::grpc::ClientContext* context, const ::GNSRPC::UUID* request, ::GNSRPC::GNSBadgeDataParam* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Get available free indexes for sites (32 max)
      virtual void GetFreeSites(::grpc::ClientContext* context, const ::GNSRPC::GNSBadgeDataParam* request, ::GNSRPC::FreeSites* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetFreeSites(::grpc::ClientContext* context, const ::GNSRPC::GNSBadgeDataParam* request, ::GNSRPC::FreeSites* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Get available windows credential (8 max)
      virtual void GetFreeWinCreds(::grpc::ClientContext* context, const ::GNSRPC::GNSBadgeDataParam* request, ::GNSRPC::FreeWinCreds* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetFreeWinCreds(::grpc::ClientContext* context, const ::GNSRPC::GNSBadgeDataParam* request, ::GNSRPC::FreeWinCreds* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Read site credentials from badge
      virtual void ReadSiteCreds(::grpc::ClientContext* context, const ::GNSRPC::GNSBadgeDataParam* request, ::GNSRPC::Sites* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ReadSiteCreds(::grpc::ClientContext* context, const ::GNSRPC::GNSBadgeDataParam* request, ::GNSRPC::Sites* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // read 1 site cred
      virtual void ReadSiteCred(::grpc::ClientContext* context, const ::GNSRPC::SiteCred* request, ::GNSRPC::SiteCred* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ReadSiteCred(::grpc::ClientContext* context, const ::GNSRPC::SiteCred* request, ::GNSRPC::SiteCred* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Read windows credentials from badge
      virtual void ReadWinCreds(::grpc::ClientContext* context, const ::GNSRPC::GNSBadgeDataParam* request, ::GNSRPC::WinCreds* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ReadWinCreds(::grpc::ClientContext* context, const ::GNSRPC::GNSBadgeDataParam* request, ::GNSRPC::WinCreds* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Read 1 windows credential from badge
      virtual void ReadWinCred(::grpc::ClientContext* context, const ::GNSRPC::WinCred* request, ::GNSRPC::WinCred* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ReadWinCred(::grpc::ClientContext* context, const ::GNSRPC::WinCred* request, ::GNSRPC::WinCred* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Delete 1 site credential
      virtual void DeleteSiteCred(::grpc::ClientContext* context, const ::GNSRPC::SiteCred* request, ::GNSRPC::GNSBadgeDataParam* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DeleteSiteCred(::grpc::ClientContext* context, const ::GNSRPC::SiteCred* request, ::GNSRPC::GNSBadgeDataParam* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Delete 1 Windows credential
      virtual void DeleteWinCred(::grpc::ClientContext* context, const ::GNSRPC::WinCred* request, ::GNSRPC::GNSBadgeDataParam* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DeleteWinCred(::grpc::ClientContext* context, const ::GNSRPC::WinCred* request, ::GNSRPC::GNSBadgeDataParam* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Write a site credential at location of offset
      virtual void WriteSiteCred(::grpc::ClientContext* context, const ::GNSRPC::SiteCred* request, ::GNSRPC::GNSBadgeDataParam* response, std::function<void(::grpc::Status)>) = 0;
      virtual void WriteSiteCred(::grpc::ClientContext* context, const ::GNSRPC::SiteCred* request, ::GNSRPC::GNSBadgeDataParam* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Write a windows credential at location of idx
      virtual void WriteWinCred(::grpc::ClientContext* context, const ::GNSRPC::WinCred* request, ::GNSRPC::GNSBadgeDataParam* response, std::function<void(::grpc::Status)>) = 0;
      virtual void WriteWinCred(::grpc::ClientContext* context, const ::GNSRPC::WinCred* request, ::GNSRPC::GNSBadgeDataParam* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Ping-pong like in-out data stream to report CardStatus changes to RPC
      // client
      virtual void StreamCardStatus(::grpc::ClientContext* context, const ::GNSRPC::GNSBadgeDataParam* request, ::grpc::ClientReadReactor< ::GNSRPC::CardStatus>* reactor) = 0;
      // Unlock card and receive hardware UUID
      virtual void UnlockCard(::grpc::ClientContext* context, const ::GNSRPC::GNSBadgeDataParam* request, ::GNSRPC::Text* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UnlockCard(::grpc::ClientContext* context, const ::GNSRPC::GNSBadgeDataParam* request, ::GNSRPC::Text* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // arbitrary client to server command to implement commands like switching
      // between USB vs NFC
      virtual void Execute(::grpc::ClientContext* context, const ::GNSRPC::Text* request, ::GNSRPC::GNSBadgeDataParam* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Execute(::grpc::ClientContext* context, const ::GNSRPC::Text* request, ::GNSRPC::GNSBadgeDataParam* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::GNSRPC::UUID>* AsyncReadUUIDRaw(::grpc::ClientContext* context, const ::GNSRPC::GNSBadgeDataParam& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::GNSRPC::UUID>* PrepareAsyncReadUUIDRaw(::grpc::ClientContext* context, const ::GNSRPC::GNSBadgeDataParam& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::GNSRPC::UUID>* AsyncReadUUIDZone2Raw(::grpc::ClientContext* context, const ::GNSRPC::GNSBadgeDataParam& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::GNSRPC::UUID>* PrepareAsyncReadUUIDZone2Raw(::grpc::ClientContext* context, const ::GNSRPC::GNSBadgeDataParam& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::GNSRPC::GNSBadgeDataParam>* AsyncStoreUUIDRaw(::grpc::ClientContext* context, const ::GNSRPC::GNSBadgeDataParam& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::GNSRPC::GNSBadgeDataParam>* PrepareAsyncStoreUUIDRaw(::grpc::ClientContext* context, const ::GNSRPC::GNSBadgeDataParam& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::GNSRPC::GNSBadgeDataParam>* AsyncFormatCardRaw(::grpc::ClientContext* context, const ::GNSRPC::UUID& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::GNSRPC::GNSBadgeDataParam>* PrepareAsyncFormatCardRaw(::grpc::ClientContext* context, const ::GNSRPC::UUID& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::GNSRPC::FreeSites>* AsyncGetFreeSitesRaw(::grpc::ClientContext* context, const ::GNSRPC::GNSBadgeDataParam& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::GNSRPC::FreeSites>* PrepareAsyncGetFreeSitesRaw(::grpc::ClientContext* context, const ::GNSRPC::GNSBadgeDataParam& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::GNSRPC::FreeWinCreds>* AsyncGetFreeWinCredsRaw(::grpc::ClientContext* context, const ::GNSRPC::GNSBadgeDataParam& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::GNSRPC::FreeWinCreds>* PrepareAsyncGetFreeWinCredsRaw(::grpc::ClientContext* context, const ::GNSRPC::GNSBadgeDataParam& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::GNSRPC::Sites>* AsyncReadSiteCredsRaw(::grpc::ClientContext* context, const ::GNSRPC::GNSBadgeDataParam& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::GNSRPC::Sites>* PrepareAsyncReadSiteCredsRaw(::grpc::ClientContext* context, const ::GNSRPC::GNSBadgeDataParam& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::GNSRPC::SiteCred>* AsyncReadSiteCredRaw(::grpc::ClientContext* context, const ::GNSRPC::SiteCred& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::GNSRPC::SiteCred>* PrepareAsyncReadSiteCredRaw(::grpc::ClientContext* context, const ::GNSRPC::SiteCred& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::GNSRPC::WinCreds>* AsyncReadWinCredsRaw(::grpc::ClientContext* context, const ::GNSRPC::GNSBadgeDataParam& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::GNSRPC::WinCreds>* PrepareAsyncReadWinCredsRaw(::grpc::ClientContext* context, const ::GNSRPC::GNSBadgeDataParam& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::GNSRPC::WinCred>* AsyncReadWinCredRaw(::grpc::ClientContext* context, const ::GNSRPC::WinCred& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::GNSRPC::WinCred>* PrepareAsyncReadWinCredRaw(::grpc::ClientContext* context, const ::GNSRPC::WinCred& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::GNSRPC::GNSBadgeDataParam>* AsyncDeleteSiteCredRaw(::grpc::ClientContext* context, const ::GNSRPC::SiteCred& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::GNSRPC::GNSBadgeDataParam>* PrepareAsyncDeleteSiteCredRaw(::grpc::ClientContext* context, const ::GNSRPC::SiteCred& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::GNSRPC::GNSBadgeDataParam>* AsyncDeleteWinCredRaw(::grpc::ClientContext* context, const ::GNSRPC::WinCred& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::GNSRPC::GNSBadgeDataParam>* PrepareAsyncDeleteWinCredRaw(::grpc::ClientContext* context, const ::GNSRPC::WinCred& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::GNSRPC::GNSBadgeDataParam>* AsyncWriteSiteCredRaw(::grpc::ClientContext* context, const ::GNSRPC::SiteCred& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::GNSRPC::GNSBadgeDataParam>* PrepareAsyncWriteSiteCredRaw(::grpc::ClientContext* context, const ::GNSRPC::SiteCred& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::GNSRPC::GNSBadgeDataParam>* AsyncWriteWinCredRaw(::grpc::ClientContext* context, const ::GNSRPC::WinCred& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::GNSRPC::GNSBadgeDataParam>* PrepareAsyncWriteWinCredRaw(::grpc::ClientContext* context, const ::GNSRPC::WinCred& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::GNSRPC::CardStatus>* StreamCardStatusRaw(::grpc::ClientContext* context, const ::GNSRPC::GNSBadgeDataParam& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::GNSRPC::CardStatus>* AsyncStreamCardStatusRaw(::grpc::ClientContext* context, const ::GNSRPC::GNSBadgeDataParam& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::GNSRPC::CardStatus>* PrepareAsyncStreamCardStatusRaw(::grpc::ClientContext* context, const ::GNSRPC::GNSBadgeDataParam& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::GNSRPC::Text>* AsyncUnlockCardRaw(::grpc::ClientContext* context, const ::GNSRPC::GNSBadgeDataParam& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::GNSRPC::Text>* PrepareAsyncUnlockCardRaw(::grpc::ClientContext* context, const ::GNSRPC::GNSBadgeDataParam& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::GNSRPC::GNSBadgeDataParam>* AsyncExecuteRaw(::grpc::ClientContext* context, const ::GNSRPC::Text& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::GNSRPC::GNSBadgeDataParam>* PrepareAsyncExecuteRaw(::grpc::ClientContext* context, const ::GNSRPC::Text& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status ReadUUID(::grpc::ClientContext* context, const ::GNSRPC::GNSBadgeDataParam& request, ::GNSRPC::UUID* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GNSRPC::UUID>> AsyncReadUUID(::grpc::ClientContext* context, const ::GNSRPC::GNSBadgeDataParam& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GNSRPC::UUID>>(AsyncReadUUIDRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GNSRPC::UUID>> PrepareAsyncReadUUID(::grpc::ClientContext* context, const ::GNSRPC::GNSBadgeDataParam& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GNSRPC::UUID>>(PrepareAsyncReadUUIDRaw(context, request, cq));
    }
    ::grpc::Status ReadUUIDZone2(::grpc::ClientContext* context, const ::GNSRPC::GNSBadgeDataParam& request, ::GNSRPC::UUID* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GNSRPC::UUID>> AsyncReadUUIDZone2(::grpc::ClientContext* context, const ::GNSRPC::GNSBadgeDataParam& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GNSRPC::UUID>>(AsyncReadUUIDZone2Raw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GNSRPC::UUID>> PrepareAsyncReadUUIDZone2(::grpc::ClientContext* context, const ::GNSRPC::GNSBadgeDataParam& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GNSRPC::UUID>>(PrepareAsyncReadUUIDZone2Raw(context, request, cq));
    }
    ::grpc::Status StoreUUID(::grpc::ClientContext* context, const ::GNSRPC::GNSBadgeDataParam& request, ::GNSRPC::GNSBadgeDataParam* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GNSRPC::GNSBadgeDataParam>> AsyncStoreUUID(::grpc::ClientContext* context, const ::GNSRPC::GNSBadgeDataParam& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GNSRPC::GNSBadgeDataParam>>(AsyncStoreUUIDRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GNSRPC::GNSBadgeDataParam>> PrepareAsyncStoreUUID(::grpc::ClientContext* context, const ::GNSRPC::GNSBadgeDataParam& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GNSRPC::GNSBadgeDataParam>>(PrepareAsyncStoreUUIDRaw(context, request, cq));
    }
    ::grpc::Status FormatCard(::grpc::ClientContext* context, const ::GNSRPC::UUID& request, ::GNSRPC::GNSBadgeDataParam* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GNSRPC::GNSBadgeDataParam>> AsyncFormatCard(::grpc::ClientContext* context, const ::GNSRPC::UUID& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GNSRPC::GNSBadgeDataParam>>(AsyncFormatCardRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GNSRPC::GNSBadgeDataParam>> PrepareAsyncFormatCard(::grpc::ClientContext* context, const ::GNSRPC::UUID& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GNSRPC::GNSBadgeDataParam>>(PrepareAsyncFormatCardRaw(context, request, cq));
    }
    ::grpc::Status GetFreeSites(::grpc::ClientContext* context, const ::GNSRPC::GNSBadgeDataParam& request, ::GNSRPC::FreeSites* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GNSRPC::FreeSites>> AsyncGetFreeSites(::grpc::ClientContext* context, const ::GNSRPC::GNSBadgeDataParam& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GNSRPC::FreeSites>>(AsyncGetFreeSitesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GNSRPC::FreeSites>> PrepareAsyncGetFreeSites(::grpc::ClientContext* context, const ::GNSRPC::GNSBadgeDataParam& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GNSRPC::FreeSites>>(PrepareAsyncGetFreeSitesRaw(context, request, cq));
    }
    ::grpc::Status GetFreeWinCreds(::grpc::ClientContext* context, const ::GNSRPC::GNSBadgeDataParam& request, ::GNSRPC::FreeWinCreds* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GNSRPC::FreeWinCreds>> AsyncGetFreeWinCreds(::grpc::ClientContext* context, const ::GNSRPC::GNSBadgeDataParam& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GNSRPC::FreeWinCreds>>(AsyncGetFreeWinCredsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GNSRPC::FreeWinCreds>> PrepareAsyncGetFreeWinCreds(::grpc::ClientContext* context, const ::GNSRPC::GNSBadgeDataParam& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GNSRPC::FreeWinCreds>>(PrepareAsyncGetFreeWinCredsRaw(context, request, cq));
    }
    ::grpc::Status ReadSiteCreds(::grpc::ClientContext* context, const ::GNSRPC::GNSBadgeDataParam& request, ::GNSRPC::Sites* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GNSRPC::Sites>> AsyncReadSiteCreds(::grpc::ClientContext* context, const ::GNSRPC::GNSBadgeDataParam& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GNSRPC::Sites>>(AsyncReadSiteCredsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GNSRPC::Sites>> PrepareAsyncReadSiteCreds(::grpc::ClientContext* context, const ::GNSRPC::GNSBadgeDataParam& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GNSRPC::Sites>>(PrepareAsyncReadSiteCredsRaw(context, request, cq));
    }
    ::grpc::Status ReadSiteCred(::grpc::ClientContext* context, const ::GNSRPC::SiteCred& request, ::GNSRPC::SiteCred* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GNSRPC::SiteCred>> AsyncReadSiteCred(::grpc::ClientContext* context, const ::GNSRPC::SiteCred& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GNSRPC::SiteCred>>(AsyncReadSiteCredRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GNSRPC::SiteCred>> PrepareAsyncReadSiteCred(::grpc::ClientContext* context, const ::GNSRPC::SiteCred& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GNSRPC::SiteCred>>(PrepareAsyncReadSiteCredRaw(context, request, cq));
    }
    ::grpc::Status ReadWinCreds(::grpc::ClientContext* context, const ::GNSRPC::GNSBadgeDataParam& request, ::GNSRPC::WinCreds* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GNSRPC::WinCreds>> AsyncReadWinCreds(::grpc::ClientContext* context, const ::GNSRPC::GNSBadgeDataParam& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GNSRPC::WinCreds>>(AsyncReadWinCredsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GNSRPC::WinCreds>> PrepareAsyncReadWinCreds(::grpc::ClientContext* context, const ::GNSRPC::GNSBadgeDataParam& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GNSRPC::WinCreds>>(PrepareAsyncReadWinCredsRaw(context, request, cq));
    }
    ::grpc::Status ReadWinCred(::grpc::ClientContext* context, const ::GNSRPC::WinCred& request, ::GNSRPC::WinCred* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GNSRPC::WinCred>> AsyncReadWinCred(::grpc::ClientContext* context, const ::GNSRPC::WinCred& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GNSRPC::WinCred>>(AsyncReadWinCredRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GNSRPC::WinCred>> PrepareAsyncReadWinCred(::grpc::ClientContext* context, const ::GNSRPC::WinCred& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GNSRPC::WinCred>>(PrepareAsyncReadWinCredRaw(context, request, cq));
    }
    ::grpc::Status DeleteSiteCred(::grpc::ClientContext* context, const ::GNSRPC::SiteCred& request, ::GNSRPC::GNSBadgeDataParam* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GNSRPC::GNSBadgeDataParam>> AsyncDeleteSiteCred(::grpc::ClientContext* context, const ::GNSRPC::SiteCred& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GNSRPC::GNSBadgeDataParam>>(AsyncDeleteSiteCredRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GNSRPC::GNSBadgeDataParam>> PrepareAsyncDeleteSiteCred(::grpc::ClientContext* context, const ::GNSRPC::SiteCred& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GNSRPC::GNSBadgeDataParam>>(PrepareAsyncDeleteSiteCredRaw(context, request, cq));
    }
    ::grpc::Status DeleteWinCred(::grpc::ClientContext* context, const ::GNSRPC::WinCred& request, ::GNSRPC::GNSBadgeDataParam* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GNSRPC::GNSBadgeDataParam>> AsyncDeleteWinCred(::grpc::ClientContext* context, const ::GNSRPC::WinCred& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GNSRPC::GNSBadgeDataParam>>(AsyncDeleteWinCredRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GNSRPC::GNSBadgeDataParam>> PrepareAsyncDeleteWinCred(::grpc::ClientContext* context, const ::GNSRPC::WinCred& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GNSRPC::GNSBadgeDataParam>>(PrepareAsyncDeleteWinCredRaw(context, request, cq));
    }
    ::grpc::Status WriteSiteCred(::grpc::ClientContext* context, const ::GNSRPC::SiteCred& request, ::GNSRPC::GNSBadgeDataParam* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GNSRPC::GNSBadgeDataParam>> AsyncWriteSiteCred(::grpc::ClientContext* context, const ::GNSRPC::SiteCred& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GNSRPC::GNSBadgeDataParam>>(AsyncWriteSiteCredRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GNSRPC::GNSBadgeDataParam>> PrepareAsyncWriteSiteCred(::grpc::ClientContext* context, const ::GNSRPC::SiteCred& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GNSRPC::GNSBadgeDataParam>>(PrepareAsyncWriteSiteCredRaw(context, request, cq));
    }
    ::grpc::Status WriteWinCred(::grpc::ClientContext* context, const ::GNSRPC::WinCred& request, ::GNSRPC::GNSBadgeDataParam* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GNSRPC::GNSBadgeDataParam>> AsyncWriteWinCred(::grpc::ClientContext* context, const ::GNSRPC::WinCred& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GNSRPC::GNSBadgeDataParam>>(AsyncWriteWinCredRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GNSRPC::GNSBadgeDataParam>> PrepareAsyncWriteWinCred(::grpc::ClientContext* context, const ::GNSRPC::WinCred& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GNSRPC::GNSBadgeDataParam>>(PrepareAsyncWriteWinCredRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::GNSRPC::CardStatus>> StreamCardStatus(::grpc::ClientContext* context, const ::GNSRPC::GNSBadgeDataParam& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::GNSRPC::CardStatus>>(StreamCardStatusRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::GNSRPC::CardStatus>> AsyncStreamCardStatus(::grpc::ClientContext* context, const ::GNSRPC::GNSBadgeDataParam& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::GNSRPC::CardStatus>>(AsyncStreamCardStatusRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::GNSRPC::CardStatus>> PrepareAsyncStreamCardStatus(::grpc::ClientContext* context, const ::GNSRPC::GNSBadgeDataParam& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::GNSRPC::CardStatus>>(PrepareAsyncStreamCardStatusRaw(context, request, cq));
    }
    ::grpc::Status UnlockCard(::grpc::ClientContext* context, const ::GNSRPC::GNSBadgeDataParam& request, ::GNSRPC::Text* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GNSRPC::Text>> AsyncUnlockCard(::grpc::ClientContext* context, const ::GNSRPC::GNSBadgeDataParam& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GNSRPC::Text>>(AsyncUnlockCardRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GNSRPC::Text>> PrepareAsyncUnlockCard(::grpc::ClientContext* context, const ::GNSRPC::GNSBadgeDataParam& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GNSRPC::Text>>(PrepareAsyncUnlockCardRaw(context, request, cq));
    }
    ::grpc::Status Execute(::grpc::ClientContext* context, const ::GNSRPC::Text& request, ::GNSRPC::GNSBadgeDataParam* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GNSRPC::GNSBadgeDataParam>> AsyncExecute(::grpc::ClientContext* context, const ::GNSRPC::Text& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GNSRPC::GNSBadgeDataParam>>(AsyncExecuteRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GNSRPC::GNSBadgeDataParam>> PrepareAsyncExecute(::grpc::ClientContext* context, const ::GNSRPC::Text& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GNSRPC::GNSBadgeDataParam>>(PrepareAsyncExecuteRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void ReadUUID(::grpc::ClientContext* context, const ::GNSRPC::GNSBadgeDataParam* request, ::GNSRPC::UUID* response, std::function<void(::grpc::Status)>) override;
      void ReadUUID(::grpc::ClientContext* context, const ::GNSRPC::GNSBadgeDataParam* request, ::GNSRPC::UUID* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ReadUUIDZone2(::grpc::ClientContext* context, const ::GNSRPC::GNSBadgeDataParam* request, ::GNSRPC::UUID* response, std::function<void(::grpc::Status)>) override;
      void ReadUUIDZone2(::grpc::ClientContext* context, const ::GNSRPC::GNSBadgeDataParam* request, ::GNSRPC::UUID* response, ::grpc::ClientUnaryReactor* reactor) override;
      void StoreUUID(::grpc::ClientContext* context, const ::GNSRPC::GNSBadgeDataParam* request, ::GNSRPC::GNSBadgeDataParam* response, std::function<void(::grpc::Status)>) override;
      void StoreUUID(::grpc::ClientContext* context, const ::GNSRPC::GNSBadgeDataParam* request, ::GNSRPC::GNSBadgeDataParam* response, ::grpc::ClientUnaryReactor* reactor) override;
      void FormatCard(::grpc::ClientContext* context, const ::GNSRPC::UUID* request, ::GNSRPC::GNSBadgeDataParam* response, std::function<void(::grpc::Status)>) override;
      void FormatCard(::grpc::ClientContext* context, const ::GNSRPC::UUID* request, ::GNSRPC::GNSBadgeDataParam* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetFreeSites(::grpc::ClientContext* context, const ::GNSRPC::GNSBadgeDataParam* request, ::GNSRPC::FreeSites* response, std::function<void(::grpc::Status)>) override;
      void GetFreeSites(::grpc::ClientContext* context, const ::GNSRPC::GNSBadgeDataParam* request, ::GNSRPC::FreeSites* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetFreeWinCreds(::grpc::ClientContext* context, const ::GNSRPC::GNSBadgeDataParam* request, ::GNSRPC::FreeWinCreds* response, std::function<void(::grpc::Status)>) override;
      void GetFreeWinCreds(::grpc::ClientContext* context, const ::GNSRPC::GNSBadgeDataParam* request, ::GNSRPC::FreeWinCreds* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ReadSiteCreds(::grpc::ClientContext* context, const ::GNSRPC::GNSBadgeDataParam* request, ::GNSRPC::Sites* response, std::function<void(::grpc::Status)>) override;
      void ReadSiteCreds(::grpc::ClientContext* context, const ::GNSRPC::GNSBadgeDataParam* request, ::GNSRPC::Sites* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ReadSiteCred(::grpc::ClientContext* context, const ::GNSRPC::SiteCred* request, ::GNSRPC::SiteCred* response, std::function<void(::grpc::Status)>) override;
      void ReadSiteCred(::grpc::ClientContext* context, const ::GNSRPC::SiteCred* request, ::GNSRPC::SiteCred* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ReadWinCreds(::grpc::ClientContext* context, const ::GNSRPC::GNSBadgeDataParam* request, ::GNSRPC::WinCreds* response, std::function<void(::grpc::Status)>) override;
      void ReadWinCreds(::grpc::ClientContext* context, const ::GNSRPC::GNSBadgeDataParam* request, ::GNSRPC::WinCreds* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ReadWinCred(::grpc::ClientContext* context, const ::GNSRPC::WinCred* request, ::GNSRPC::WinCred* response, std::function<void(::grpc::Status)>) override;
      void ReadWinCred(::grpc::ClientContext* context, const ::GNSRPC::WinCred* request, ::GNSRPC::WinCred* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DeleteSiteCred(::grpc::ClientContext* context, const ::GNSRPC::SiteCred* request, ::GNSRPC::GNSBadgeDataParam* response, std::function<void(::grpc::Status)>) override;
      void DeleteSiteCred(::grpc::ClientContext* context, const ::GNSRPC::SiteCred* request, ::GNSRPC::GNSBadgeDataParam* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DeleteWinCred(::grpc::ClientContext* context, const ::GNSRPC::WinCred* request, ::GNSRPC::GNSBadgeDataParam* response, std::function<void(::grpc::Status)>) override;
      void DeleteWinCred(::grpc::ClientContext* context, const ::GNSRPC::WinCred* request, ::GNSRPC::GNSBadgeDataParam* response, ::grpc::ClientUnaryReactor* reactor) override;
      void WriteSiteCred(::grpc::ClientContext* context, const ::GNSRPC::SiteCred* request, ::GNSRPC::GNSBadgeDataParam* response, std::function<void(::grpc::Status)>) override;
      void WriteSiteCred(::grpc::ClientContext* context, const ::GNSRPC::SiteCred* request, ::GNSRPC::GNSBadgeDataParam* response, ::grpc::ClientUnaryReactor* reactor) override;
      void WriteWinCred(::grpc::ClientContext* context, const ::GNSRPC::WinCred* request, ::GNSRPC::GNSBadgeDataParam* response, std::function<void(::grpc::Status)>) override;
      void WriteWinCred(::grpc::ClientContext* context, const ::GNSRPC::WinCred* request, ::GNSRPC::GNSBadgeDataParam* response, ::grpc::ClientUnaryReactor* reactor) override;
      void StreamCardStatus(::grpc::ClientContext* context, const ::GNSRPC::GNSBadgeDataParam* request, ::grpc::ClientReadReactor< ::GNSRPC::CardStatus>* reactor) override;
      void UnlockCard(::grpc::ClientContext* context, const ::GNSRPC::GNSBadgeDataParam* request, ::GNSRPC::Text* response, std::function<void(::grpc::Status)>) override;
      void UnlockCard(::grpc::ClientContext* context, const ::GNSRPC::GNSBadgeDataParam* request, ::GNSRPC::Text* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Execute(::grpc::ClientContext* context, const ::GNSRPC::Text* request, ::GNSRPC::GNSBadgeDataParam* response, std::function<void(::grpc::Status)>) override;
      void Execute(::grpc::ClientContext* context, const ::GNSRPC::Text* request, ::GNSRPC::GNSBadgeDataParam* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::GNSRPC::UUID>* AsyncReadUUIDRaw(::grpc::ClientContext* context, const ::GNSRPC::GNSBadgeDataParam& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::GNSRPC::UUID>* PrepareAsyncReadUUIDRaw(::grpc::ClientContext* context, const ::GNSRPC::GNSBadgeDataParam& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::GNSRPC::UUID>* AsyncReadUUIDZone2Raw(::grpc::ClientContext* context, const ::GNSRPC::GNSBadgeDataParam& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::GNSRPC::UUID>* PrepareAsyncReadUUIDZone2Raw(::grpc::ClientContext* context, const ::GNSRPC::GNSBadgeDataParam& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::GNSRPC::GNSBadgeDataParam>* AsyncStoreUUIDRaw(::grpc::ClientContext* context, const ::GNSRPC::GNSBadgeDataParam& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::GNSRPC::GNSBadgeDataParam>* PrepareAsyncStoreUUIDRaw(::grpc::ClientContext* context, const ::GNSRPC::GNSBadgeDataParam& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::GNSRPC::GNSBadgeDataParam>* AsyncFormatCardRaw(::grpc::ClientContext* context, const ::GNSRPC::UUID& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::GNSRPC::GNSBadgeDataParam>* PrepareAsyncFormatCardRaw(::grpc::ClientContext* context, const ::GNSRPC::UUID& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::GNSRPC::FreeSites>* AsyncGetFreeSitesRaw(::grpc::ClientContext* context, const ::GNSRPC::GNSBadgeDataParam& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::GNSRPC::FreeSites>* PrepareAsyncGetFreeSitesRaw(::grpc::ClientContext* context, const ::GNSRPC::GNSBadgeDataParam& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::GNSRPC::FreeWinCreds>* AsyncGetFreeWinCredsRaw(::grpc::ClientContext* context, const ::GNSRPC::GNSBadgeDataParam& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::GNSRPC::FreeWinCreds>* PrepareAsyncGetFreeWinCredsRaw(::grpc::ClientContext* context, const ::GNSRPC::GNSBadgeDataParam& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::GNSRPC::Sites>* AsyncReadSiteCredsRaw(::grpc::ClientContext* context, const ::GNSRPC::GNSBadgeDataParam& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::GNSRPC::Sites>* PrepareAsyncReadSiteCredsRaw(::grpc::ClientContext* context, const ::GNSRPC::GNSBadgeDataParam& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::GNSRPC::SiteCred>* AsyncReadSiteCredRaw(::grpc::ClientContext* context, const ::GNSRPC::SiteCred& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::GNSRPC::SiteCred>* PrepareAsyncReadSiteCredRaw(::grpc::ClientContext* context, const ::GNSRPC::SiteCred& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::GNSRPC::WinCreds>* AsyncReadWinCredsRaw(::grpc::ClientContext* context, const ::GNSRPC::GNSBadgeDataParam& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::GNSRPC::WinCreds>* PrepareAsyncReadWinCredsRaw(::grpc::ClientContext* context, const ::GNSRPC::GNSBadgeDataParam& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::GNSRPC::WinCred>* AsyncReadWinCredRaw(::grpc::ClientContext* context, const ::GNSRPC::WinCred& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::GNSRPC::WinCred>* PrepareAsyncReadWinCredRaw(::grpc::ClientContext* context, const ::GNSRPC::WinCred& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::GNSRPC::GNSBadgeDataParam>* AsyncDeleteSiteCredRaw(::grpc::ClientContext* context, const ::GNSRPC::SiteCred& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::GNSRPC::GNSBadgeDataParam>* PrepareAsyncDeleteSiteCredRaw(::grpc::ClientContext* context, const ::GNSRPC::SiteCred& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::GNSRPC::GNSBadgeDataParam>* AsyncDeleteWinCredRaw(::grpc::ClientContext* context, const ::GNSRPC::WinCred& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::GNSRPC::GNSBadgeDataParam>* PrepareAsyncDeleteWinCredRaw(::grpc::ClientContext* context, const ::GNSRPC::WinCred& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::GNSRPC::GNSBadgeDataParam>* AsyncWriteSiteCredRaw(::grpc::ClientContext* context, const ::GNSRPC::SiteCred& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::GNSRPC::GNSBadgeDataParam>* PrepareAsyncWriteSiteCredRaw(::grpc::ClientContext* context, const ::GNSRPC::SiteCred& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::GNSRPC::GNSBadgeDataParam>* AsyncWriteWinCredRaw(::grpc::ClientContext* context, const ::GNSRPC::WinCred& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::GNSRPC::GNSBadgeDataParam>* PrepareAsyncWriteWinCredRaw(::grpc::ClientContext* context, const ::GNSRPC::WinCred& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::GNSRPC::CardStatus>* StreamCardStatusRaw(::grpc::ClientContext* context, const ::GNSRPC::GNSBadgeDataParam& request) override;
    ::grpc::ClientAsyncReader< ::GNSRPC::CardStatus>* AsyncStreamCardStatusRaw(::grpc::ClientContext* context, const ::GNSRPC::GNSBadgeDataParam& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::GNSRPC::CardStatus>* PrepareAsyncStreamCardStatusRaw(::grpc::ClientContext* context, const ::GNSRPC::GNSBadgeDataParam& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::GNSRPC::Text>* AsyncUnlockCardRaw(::grpc::ClientContext* context, const ::GNSRPC::GNSBadgeDataParam& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::GNSRPC::Text>* PrepareAsyncUnlockCardRaw(::grpc::ClientContext* context, const ::GNSRPC::GNSBadgeDataParam& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::GNSRPC::GNSBadgeDataParam>* AsyncExecuteRaw(::grpc::ClientContext* context, const ::GNSRPC::Text& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::GNSRPC::GNSBadgeDataParam>* PrepareAsyncExecuteRaw(::grpc::ClientContext* context, const ::GNSRPC::Text& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_ReadUUID_;
    const ::grpc::internal::RpcMethod rpcmethod_ReadUUIDZone2_;
    const ::grpc::internal::RpcMethod rpcmethod_StoreUUID_;
    const ::grpc::internal::RpcMethod rpcmethod_FormatCard_;
    const ::grpc::internal::RpcMethod rpcmethod_GetFreeSites_;
    const ::grpc::internal::RpcMethod rpcmethod_GetFreeWinCreds_;
    const ::grpc::internal::RpcMethod rpcmethod_ReadSiteCreds_;
    const ::grpc::internal::RpcMethod rpcmethod_ReadSiteCred_;
    const ::grpc::internal::RpcMethod rpcmethod_ReadWinCreds_;
    const ::grpc::internal::RpcMethod rpcmethod_ReadWinCred_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteSiteCred_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteWinCred_;
    const ::grpc::internal::RpcMethod rpcmethod_WriteSiteCred_;
    const ::grpc::internal::RpcMethod rpcmethod_WriteWinCred_;
    const ::grpc::internal::RpcMethod rpcmethod_StreamCardStatus_;
    const ::grpc::internal::RpcMethod rpcmethod_UnlockCard_;
    const ::grpc::internal::RpcMethod rpcmethod_Execute_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Get HW UUID of card
    virtual ::grpc::Status ReadUUID(::grpc::ServerContext* context, const ::GNSRPC::GNSBadgeDataParam* request, ::GNSRPC::UUID* response);
    // Get old UUID of card on Zone 2
    virtual ::grpc::Status ReadUUIDZone2(::grpc::ServerContext* context, const ::GNSRPC::GNSBadgeDataParam* request, ::GNSRPC::UUID* response);
    // Read HW UUID then store to Zone3
    virtual ::grpc::Status StoreUUID(::grpc::ServerContext* context, const ::GNSRPC::GNSBadgeDataParam* request, ::GNSRPC::GNSBadgeDataParam* response);
    // Format card 0: sites + wincreds, 1: sites only, 2: wincreds
    virtual ::grpc::Status FormatCard(::grpc::ServerContext* context, const ::GNSRPC::UUID* request, ::GNSRPC::GNSBadgeDataParam* response);
    // Get available free indexes for sites (32 max)
    virtual ::grpc::Status GetFreeSites(::grpc::ServerContext* context, const ::GNSRPC::GNSBadgeDataParam* request, ::GNSRPC::FreeSites* response);
    // Get available windows credential (8 max)
    virtual ::grpc::Status GetFreeWinCreds(::grpc::ServerContext* context, const ::GNSRPC::GNSBadgeDataParam* request, ::GNSRPC::FreeWinCreds* response);
    // Read site credentials from badge
    virtual ::grpc::Status ReadSiteCreds(::grpc::ServerContext* context, const ::GNSRPC::GNSBadgeDataParam* request, ::GNSRPC::Sites* response);
    // read 1 site cred
    virtual ::grpc::Status ReadSiteCred(::grpc::ServerContext* context, const ::GNSRPC::SiteCred* request, ::GNSRPC::SiteCred* response);
    // Read windows credentials from badge
    virtual ::grpc::Status ReadWinCreds(::grpc::ServerContext* context, const ::GNSRPC::GNSBadgeDataParam* request, ::GNSRPC::WinCreds* response);
    // Read 1 windows credential from badge
    virtual ::grpc::Status ReadWinCred(::grpc::ServerContext* context, const ::GNSRPC::WinCred* request, ::GNSRPC::WinCred* response);
    // Delete 1 site credential
    virtual ::grpc::Status DeleteSiteCred(::grpc::ServerContext* context, const ::GNSRPC::SiteCred* request, ::GNSRPC::GNSBadgeDataParam* response);
    // Delete 1 Windows credential
    virtual ::grpc::Status DeleteWinCred(::grpc::ServerContext* context, const ::GNSRPC::WinCred* request, ::GNSRPC::GNSBadgeDataParam* response);
    // Write a site credential at location of offset
    virtual ::grpc::Status WriteSiteCred(::grpc::ServerContext* context, const ::GNSRPC::SiteCred* request, ::GNSRPC::GNSBadgeDataParam* response);
    // Write a windows credential at location of idx
    virtual ::grpc::Status WriteWinCred(::grpc::ServerContext* context, const ::GNSRPC::WinCred* request, ::GNSRPC::GNSBadgeDataParam* response);
    // Ping-pong like in-out data stream to report CardStatus changes to RPC
    // client
    virtual ::grpc::Status StreamCardStatus(::grpc::ServerContext* context, const ::GNSRPC::GNSBadgeDataParam* request, ::grpc::ServerWriter< ::GNSRPC::CardStatus>* writer);
    // Unlock card and receive hardware UUID
    virtual ::grpc::Status UnlockCard(::grpc::ServerContext* context, const ::GNSRPC::GNSBadgeDataParam* request, ::GNSRPC::Text* response);
    // arbitrary client to server command to implement commands like switching
    // between USB vs NFC
    virtual ::grpc::Status Execute(::grpc::ServerContext* context, const ::GNSRPC::Text* request, ::GNSRPC::GNSBadgeDataParam* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_ReadUUID : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ReadUUID() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_ReadUUID() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReadUUID(::grpc::ServerContext* /*context*/, const ::GNSRPC::GNSBadgeDataParam* /*request*/, ::GNSRPC::UUID* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReadUUID(::grpc::ServerContext* context, ::GNSRPC::GNSBadgeDataParam* request, ::grpc::ServerAsyncResponseWriter< ::GNSRPC::UUID>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ReadUUIDZone2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ReadUUIDZone2() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_ReadUUIDZone2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReadUUIDZone2(::grpc::ServerContext* /*context*/, const ::GNSRPC::GNSBadgeDataParam* /*request*/, ::GNSRPC::UUID* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReadUUIDZone2(::grpc::ServerContext* context, ::GNSRPC::GNSBadgeDataParam* request, ::grpc::ServerAsyncResponseWriter< ::GNSRPC::UUID>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_StoreUUID : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_StoreUUID() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_StoreUUID() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StoreUUID(::grpc::ServerContext* /*context*/, const ::GNSRPC::GNSBadgeDataParam* /*request*/, ::GNSRPC::GNSBadgeDataParam* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStoreUUID(::grpc::ServerContext* context, ::GNSRPC::GNSBadgeDataParam* request, ::grpc::ServerAsyncResponseWriter< ::GNSRPC::GNSBadgeDataParam>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_FormatCard : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_FormatCard() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_FormatCard() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FormatCard(::grpc::ServerContext* /*context*/, const ::GNSRPC::UUID* /*request*/, ::GNSRPC::GNSBadgeDataParam* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestFormatCard(::grpc::ServerContext* context, ::GNSRPC::UUID* request, ::grpc::ServerAsyncResponseWriter< ::GNSRPC::GNSBadgeDataParam>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetFreeSites : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetFreeSites() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_GetFreeSites() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetFreeSites(::grpc::ServerContext* /*context*/, const ::GNSRPC::GNSBadgeDataParam* /*request*/, ::GNSRPC::FreeSites* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetFreeSites(::grpc::ServerContext* context, ::GNSRPC::GNSBadgeDataParam* request, ::grpc::ServerAsyncResponseWriter< ::GNSRPC::FreeSites>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetFreeWinCreds : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetFreeWinCreds() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_GetFreeWinCreds() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetFreeWinCreds(::grpc::ServerContext* /*context*/, const ::GNSRPC::GNSBadgeDataParam* /*request*/, ::GNSRPC::FreeWinCreds* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetFreeWinCreds(::grpc::ServerContext* context, ::GNSRPC::GNSBadgeDataParam* request, ::grpc::ServerAsyncResponseWriter< ::GNSRPC::FreeWinCreds>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ReadSiteCreds : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ReadSiteCreds() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_ReadSiteCreds() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReadSiteCreds(::grpc::ServerContext* /*context*/, const ::GNSRPC::GNSBadgeDataParam* /*request*/, ::GNSRPC::Sites* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReadSiteCreds(::grpc::ServerContext* context, ::GNSRPC::GNSBadgeDataParam* request, ::grpc::ServerAsyncResponseWriter< ::GNSRPC::Sites>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ReadSiteCred : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ReadSiteCred() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_ReadSiteCred() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReadSiteCred(::grpc::ServerContext* /*context*/, const ::GNSRPC::SiteCred* /*request*/, ::GNSRPC::SiteCred* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReadSiteCred(::grpc::ServerContext* context, ::GNSRPC::SiteCred* request, ::grpc::ServerAsyncResponseWriter< ::GNSRPC::SiteCred>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ReadWinCreds : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ReadWinCreds() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_ReadWinCreds() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReadWinCreds(::grpc::ServerContext* /*context*/, const ::GNSRPC::GNSBadgeDataParam* /*request*/, ::GNSRPC::WinCreds* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReadWinCreds(::grpc::ServerContext* context, ::GNSRPC::GNSBadgeDataParam* request, ::grpc::ServerAsyncResponseWriter< ::GNSRPC::WinCreds>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ReadWinCred : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ReadWinCred() {
      ::grpc::Service::MarkMethodAsync(9);
    }
    ~WithAsyncMethod_ReadWinCred() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReadWinCred(::grpc::ServerContext* /*context*/, const ::GNSRPC::WinCred* /*request*/, ::GNSRPC::WinCred* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReadWinCred(::grpc::ServerContext* context, ::GNSRPC::WinCred* request, ::grpc::ServerAsyncResponseWriter< ::GNSRPC::WinCred>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteSiteCred : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DeleteSiteCred() {
      ::grpc::Service::MarkMethodAsync(10);
    }
    ~WithAsyncMethod_DeleteSiteCred() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteSiteCred(::grpc::ServerContext* /*context*/, const ::GNSRPC::SiteCred* /*request*/, ::GNSRPC::GNSBadgeDataParam* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteSiteCred(::grpc::ServerContext* context, ::GNSRPC::SiteCred* request, ::grpc::ServerAsyncResponseWriter< ::GNSRPC::GNSBadgeDataParam>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteWinCred : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DeleteWinCred() {
      ::grpc::Service::MarkMethodAsync(11);
    }
    ~WithAsyncMethod_DeleteWinCred() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteWinCred(::grpc::ServerContext* /*context*/, const ::GNSRPC::WinCred* /*request*/, ::GNSRPC::GNSBadgeDataParam* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteWinCred(::grpc::ServerContext* context, ::GNSRPC::WinCred* request, ::grpc::ServerAsyncResponseWriter< ::GNSRPC::GNSBadgeDataParam>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_WriteSiteCred : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_WriteSiteCred() {
      ::grpc::Service::MarkMethodAsync(12);
    }
    ~WithAsyncMethod_WriteSiteCred() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status WriteSiteCred(::grpc::ServerContext* /*context*/, const ::GNSRPC::SiteCred* /*request*/, ::GNSRPC::GNSBadgeDataParam* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestWriteSiteCred(::grpc::ServerContext* context, ::GNSRPC::SiteCred* request, ::grpc::ServerAsyncResponseWriter< ::GNSRPC::GNSBadgeDataParam>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(12, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_WriteWinCred : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_WriteWinCred() {
      ::grpc::Service::MarkMethodAsync(13);
    }
    ~WithAsyncMethod_WriteWinCred() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status WriteWinCred(::grpc::ServerContext* /*context*/, const ::GNSRPC::WinCred* /*request*/, ::GNSRPC::GNSBadgeDataParam* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestWriteWinCred(::grpc::ServerContext* context, ::GNSRPC::WinCred* request, ::grpc::ServerAsyncResponseWriter< ::GNSRPC::GNSBadgeDataParam>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(13, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_StreamCardStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_StreamCardStatus() {
      ::grpc::Service::MarkMethodAsync(14);
    }
    ~WithAsyncMethod_StreamCardStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamCardStatus(::grpc::ServerContext* /*context*/, const ::GNSRPC::GNSBadgeDataParam* /*request*/, ::grpc::ServerWriter< ::GNSRPC::CardStatus>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStreamCardStatus(::grpc::ServerContext* context, ::GNSRPC::GNSBadgeDataParam* request, ::grpc::ServerAsyncWriter< ::GNSRPC::CardStatus>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(14, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UnlockCard : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UnlockCard() {
      ::grpc::Service::MarkMethodAsync(15);
    }
    ~WithAsyncMethod_UnlockCard() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UnlockCard(::grpc::ServerContext* /*context*/, const ::GNSRPC::GNSBadgeDataParam* /*request*/, ::GNSRPC::Text* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUnlockCard(::grpc::ServerContext* context, ::GNSRPC::GNSBadgeDataParam* request, ::grpc::ServerAsyncResponseWriter< ::GNSRPC::Text>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(15, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Execute : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Execute() {
      ::grpc::Service::MarkMethodAsync(16);
    }
    ~WithAsyncMethod_Execute() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Execute(::grpc::ServerContext* /*context*/, const ::GNSRPC::Text* /*request*/, ::GNSRPC::GNSBadgeDataParam* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestExecute(::grpc::ServerContext* context, ::GNSRPC::Text* request, ::grpc::ServerAsyncResponseWriter< ::GNSRPC::GNSBadgeDataParam>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(16, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_ReadUUID<WithAsyncMethod_ReadUUIDZone2<WithAsyncMethod_StoreUUID<WithAsyncMethod_FormatCard<WithAsyncMethod_GetFreeSites<WithAsyncMethod_GetFreeWinCreds<WithAsyncMethod_ReadSiteCreds<WithAsyncMethod_ReadSiteCred<WithAsyncMethod_ReadWinCreds<WithAsyncMethod_ReadWinCred<WithAsyncMethod_DeleteSiteCred<WithAsyncMethod_DeleteWinCred<WithAsyncMethod_WriteSiteCred<WithAsyncMethod_WriteWinCred<WithAsyncMethod_StreamCardStatus<WithAsyncMethod_UnlockCard<WithAsyncMethod_Execute<Service > > > > > > > > > > > > > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_ReadUUID : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ReadUUID() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::GNSRPC::GNSBadgeDataParam, ::GNSRPC::UUID>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::GNSRPC::GNSBadgeDataParam* request, ::GNSRPC::UUID* response) { return this->ReadUUID(context, request, response); }));}
    void SetMessageAllocatorFor_ReadUUID(
        ::grpc::MessageAllocator< ::GNSRPC::GNSBadgeDataParam, ::GNSRPC::UUID>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::GNSRPC::GNSBadgeDataParam, ::GNSRPC::UUID>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ReadUUID() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReadUUID(::grpc::ServerContext* /*context*/, const ::GNSRPC::GNSBadgeDataParam* /*request*/, ::GNSRPC::UUID* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ReadUUID(
      ::grpc::CallbackServerContext* /*context*/, const ::GNSRPC::GNSBadgeDataParam* /*request*/, ::GNSRPC::UUID* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ReadUUIDZone2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ReadUUIDZone2() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::GNSRPC::GNSBadgeDataParam, ::GNSRPC::UUID>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::GNSRPC::GNSBadgeDataParam* request, ::GNSRPC::UUID* response) { return this->ReadUUIDZone2(context, request, response); }));}
    void SetMessageAllocatorFor_ReadUUIDZone2(
        ::grpc::MessageAllocator< ::GNSRPC::GNSBadgeDataParam, ::GNSRPC::UUID>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::GNSRPC::GNSBadgeDataParam, ::GNSRPC::UUID>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ReadUUIDZone2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReadUUIDZone2(::grpc::ServerContext* /*context*/, const ::GNSRPC::GNSBadgeDataParam* /*request*/, ::GNSRPC::UUID* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ReadUUIDZone2(
      ::grpc::CallbackServerContext* /*context*/, const ::GNSRPC::GNSBadgeDataParam* /*request*/, ::GNSRPC::UUID* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_StoreUUID : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_StoreUUID() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::GNSRPC::GNSBadgeDataParam, ::GNSRPC::GNSBadgeDataParam>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::GNSRPC::GNSBadgeDataParam* request, ::GNSRPC::GNSBadgeDataParam* response) { return this->StoreUUID(context, request, response); }));}
    void SetMessageAllocatorFor_StoreUUID(
        ::grpc::MessageAllocator< ::GNSRPC::GNSBadgeDataParam, ::GNSRPC::GNSBadgeDataParam>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::GNSRPC::GNSBadgeDataParam, ::GNSRPC::GNSBadgeDataParam>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_StoreUUID() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StoreUUID(::grpc::ServerContext* /*context*/, const ::GNSRPC::GNSBadgeDataParam* /*request*/, ::GNSRPC::GNSBadgeDataParam* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* StoreUUID(
      ::grpc::CallbackServerContext* /*context*/, const ::GNSRPC::GNSBadgeDataParam* /*request*/, ::GNSRPC::GNSBadgeDataParam* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_FormatCard : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_FormatCard() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::GNSRPC::UUID, ::GNSRPC::GNSBadgeDataParam>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::GNSRPC::UUID* request, ::GNSRPC::GNSBadgeDataParam* response) { return this->FormatCard(context, request, response); }));}
    void SetMessageAllocatorFor_FormatCard(
        ::grpc::MessageAllocator< ::GNSRPC::UUID, ::GNSRPC::GNSBadgeDataParam>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::GNSRPC::UUID, ::GNSRPC::GNSBadgeDataParam>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_FormatCard() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FormatCard(::grpc::ServerContext* /*context*/, const ::GNSRPC::UUID* /*request*/, ::GNSRPC::GNSBadgeDataParam* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* FormatCard(
      ::grpc::CallbackServerContext* /*context*/, const ::GNSRPC::UUID* /*request*/, ::GNSRPC::GNSBadgeDataParam* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetFreeSites : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetFreeSites() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::GNSRPC::GNSBadgeDataParam, ::GNSRPC::FreeSites>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::GNSRPC::GNSBadgeDataParam* request, ::GNSRPC::FreeSites* response) { return this->GetFreeSites(context, request, response); }));}
    void SetMessageAllocatorFor_GetFreeSites(
        ::grpc::MessageAllocator< ::GNSRPC::GNSBadgeDataParam, ::GNSRPC::FreeSites>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::GNSRPC::GNSBadgeDataParam, ::GNSRPC::FreeSites>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetFreeSites() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetFreeSites(::grpc::ServerContext* /*context*/, const ::GNSRPC::GNSBadgeDataParam* /*request*/, ::GNSRPC::FreeSites* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetFreeSites(
      ::grpc::CallbackServerContext* /*context*/, const ::GNSRPC::GNSBadgeDataParam* /*request*/, ::GNSRPC::FreeSites* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetFreeWinCreds : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetFreeWinCreds() {
      ::grpc::Service::MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::GNSRPC::GNSBadgeDataParam, ::GNSRPC::FreeWinCreds>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::GNSRPC::GNSBadgeDataParam* request, ::GNSRPC::FreeWinCreds* response) { return this->GetFreeWinCreds(context, request, response); }));}
    void SetMessageAllocatorFor_GetFreeWinCreds(
        ::grpc::MessageAllocator< ::GNSRPC::GNSBadgeDataParam, ::GNSRPC::FreeWinCreds>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::GNSRPC::GNSBadgeDataParam, ::GNSRPC::FreeWinCreds>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetFreeWinCreds() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetFreeWinCreds(::grpc::ServerContext* /*context*/, const ::GNSRPC::GNSBadgeDataParam* /*request*/, ::GNSRPC::FreeWinCreds* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetFreeWinCreds(
      ::grpc::CallbackServerContext* /*context*/, const ::GNSRPC::GNSBadgeDataParam* /*request*/, ::GNSRPC::FreeWinCreds* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ReadSiteCreds : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ReadSiteCreds() {
      ::grpc::Service::MarkMethodCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::GNSRPC::GNSBadgeDataParam, ::GNSRPC::Sites>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::GNSRPC::GNSBadgeDataParam* request, ::GNSRPC::Sites* response) { return this->ReadSiteCreds(context, request, response); }));}
    void SetMessageAllocatorFor_ReadSiteCreds(
        ::grpc::MessageAllocator< ::GNSRPC::GNSBadgeDataParam, ::GNSRPC::Sites>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(6);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::GNSRPC::GNSBadgeDataParam, ::GNSRPC::Sites>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ReadSiteCreds() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReadSiteCreds(::grpc::ServerContext* /*context*/, const ::GNSRPC::GNSBadgeDataParam* /*request*/, ::GNSRPC::Sites* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ReadSiteCreds(
      ::grpc::CallbackServerContext* /*context*/, const ::GNSRPC::GNSBadgeDataParam* /*request*/, ::GNSRPC::Sites* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ReadSiteCred : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ReadSiteCred() {
      ::grpc::Service::MarkMethodCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::GNSRPC::SiteCred, ::GNSRPC::SiteCred>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::GNSRPC::SiteCred* request, ::GNSRPC::SiteCred* response) { return this->ReadSiteCred(context, request, response); }));}
    void SetMessageAllocatorFor_ReadSiteCred(
        ::grpc::MessageAllocator< ::GNSRPC::SiteCred, ::GNSRPC::SiteCred>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(7);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::GNSRPC::SiteCred, ::GNSRPC::SiteCred>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ReadSiteCred() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReadSiteCred(::grpc::ServerContext* /*context*/, const ::GNSRPC::SiteCred* /*request*/, ::GNSRPC::SiteCred* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ReadSiteCred(
      ::grpc::CallbackServerContext* /*context*/, const ::GNSRPC::SiteCred* /*request*/, ::GNSRPC::SiteCred* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ReadWinCreds : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ReadWinCreds() {
      ::grpc::Service::MarkMethodCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::GNSRPC::GNSBadgeDataParam, ::GNSRPC::WinCreds>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::GNSRPC::GNSBadgeDataParam* request, ::GNSRPC::WinCreds* response) { return this->ReadWinCreds(context, request, response); }));}
    void SetMessageAllocatorFor_ReadWinCreds(
        ::grpc::MessageAllocator< ::GNSRPC::GNSBadgeDataParam, ::GNSRPC::WinCreds>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(8);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::GNSRPC::GNSBadgeDataParam, ::GNSRPC::WinCreds>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ReadWinCreds() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReadWinCreds(::grpc::ServerContext* /*context*/, const ::GNSRPC::GNSBadgeDataParam* /*request*/, ::GNSRPC::WinCreds* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ReadWinCreds(
      ::grpc::CallbackServerContext* /*context*/, const ::GNSRPC::GNSBadgeDataParam* /*request*/, ::GNSRPC::WinCreds* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ReadWinCred : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ReadWinCred() {
      ::grpc::Service::MarkMethodCallback(9,
          new ::grpc::internal::CallbackUnaryHandler< ::GNSRPC::WinCred, ::GNSRPC::WinCred>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::GNSRPC::WinCred* request, ::GNSRPC::WinCred* response) { return this->ReadWinCred(context, request, response); }));}
    void SetMessageAllocatorFor_ReadWinCred(
        ::grpc::MessageAllocator< ::GNSRPC::WinCred, ::GNSRPC::WinCred>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(9);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::GNSRPC::WinCred, ::GNSRPC::WinCred>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ReadWinCred() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReadWinCred(::grpc::ServerContext* /*context*/, const ::GNSRPC::WinCred* /*request*/, ::GNSRPC::WinCred* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ReadWinCred(
      ::grpc::CallbackServerContext* /*context*/, const ::GNSRPC::WinCred* /*request*/, ::GNSRPC::WinCred* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DeleteSiteCred : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DeleteSiteCred() {
      ::grpc::Service::MarkMethodCallback(10,
          new ::grpc::internal::CallbackUnaryHandler< ::GNSRPC::SiteCred, ::GNSRPC::GNSBadgeDataParam>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::GNSRPC::SiteCred* request, ::GNSRPC::GNSBadgeDataParam* response) { return this->DeleteSiteCred(context, request, response); }));}
    void SetMessageAllocatorFor_DeleteSiteCred(
        ::grpc::MessageAllocator< ::GNSRPC::SiteCred, ::GNSRPC::GNSBadgeDataParam>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(10);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::GNSRPC::SiteCred, ::GNSRPC::GNSBadgeDataParam>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DeleteSiteCred() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteSiteCred(::grpc::ServerContext* /*context*/, const ::GNSRPC::SiteCred* /*request*/, ::GNSRPC::GNSBadgeDataParam* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteSiteCred(
      ::grpc::CallbackServerContext* /*context*/, const ::GNSRPC::SiteCred* /*request*/, ::GNSRPC::GNSBadgeDataParam* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DeleteWinCred : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DeleteWinCred() {
      ::grpc::Service::MarkMethodCallback(11,
          new ::grpc::internal::CallbackUnaryHandler< ::GNSRPC::WinCred, ::GNSRPC::GNSBadgeDataParam>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::GNSRPC::WinCred* request, ::GNSRPC::GNSBadgeDataParam* response) { return this->DeleteWinCred(context, request, response); }));}
    void SetMessageAllocatorFor_DeleteWinCred(
        ::grpc::MessageAllocator< ::GNSRPC::WinCred, ::GNSRPC::GNSBadgeDataParam>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(11);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::GNSRPC::WinCred, ::GNSRPC::GNSBadgeDataParam>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DeleteWinCred() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteWinCred(::grpc::ServerContext* /*context*/, const ::GNSRPC::WinCred* /*request*/, ::GNSRPC::GNSBadgeDataParam* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteWinCred(
      ::grpc::CallbackServerContext* /*context*/, const ::GNSRPC::WinCred* /*request*/, ::GNSRPC::GNSBadgeDataParam* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_WriteSiteCred : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_WriteSiteCred() {
      ::grpc::Service::MarkMethodCallback(12,
          new ::grpc::internal::CallbackUnaryHandler< ::GNSRPC::SiteCred, ::GNSRPC::GNSBadgeDataParam>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::GNSRPC::SiteCred* request, ::GNSRPC::GNSBadgeDataParam* response) { return this->WriteSiteCred(context, request, response); }));}
    void SetMessageAllocatorFor_WriteSiteCred(
        ::grpc::MessageAllocator< ::GNSRPC::SiteCred, ::GNSRPC::GNSBadgeDataParam>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(12);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::GNSRPC::SiteCred, ::GNSRPC::GNSBadgeDataParam>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_WriteSiteCred() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status WriteSiteCred(::grpc::ServerContext* /*context*/, const ::GNSRPC::SiteCred* /*request*/, ::GNSRPC::GNSBadgeDataParam* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* WriteSiteCred(
      ::grpc::CallbackServerContext* /*context*/, const ::GNSRPC::SiteCred* /*request*/, ::GNSRPC::GNSBadgeDataParam* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_WriteWinCred : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_WriteWinCred() {
      ::grpc::Service::MarkMethodCallback(13,
          new ::grpc::internal::CallbackUnaryHandler< ::GNSRPC::WinCred, ::GNSRPC::GNSBadgeDataParam>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::GNSRPC::WinCred* request, ::GNSRPC::GNSBadgeDataParam* response) { return this->WriteWinCred(context, request, response); }));}
    void SetMessageAllocatorFor_WriteWinCred(
        ::grpc::MessageAllocator< ::GNSRPC::WinCred, ::GNSRPC::GNSBadgeDataParam>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(13);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::GNSRPC::WinCred, ::GNSRPC::GNSBadgeDataParam>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_WriteWinCred() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status WriteWinCred(::grpc::ServerContext* /*context*/, const ::GNSRPC::WinCred* /*request*/, ::GNSRPC::GNSBadgeDataParam* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* WriteWinCred(
      ::grpc::CallbackServerContext* /*context*/, const ::GNSRPC::WinCred* /*request*/, ::GNSRPC::GNSBadgeDataParam* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_StreamCardStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_StreamCardStatus() {
      ::grpc::Service::MarkMethodCallback(14,
          new ::grpc::internal::CallbackServerStreamingHandler< ::GNSRPC::GNSBadgeDataParam, ::GNSRPC::CardStatus>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::GNSRPC::GNSBadgeDataParam* request) { return this->StreamCardStatus(context, request); }));
    }
    ~WithCallbackMethod_StreamCardStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamCardStatus(::grpc::ServerContext* /*context*/, const ::GNSRPC::GNSBadgeDataParam* /*request*/, ::grpc::ServerWriter< ::GNSRPC::CardStatus>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::GNSRPC::CardStatus>* StreamCardStatus(
      ::grpc::CallbackServerContext* /*context*/, const ::GNSRPC::GNSBadgeDataParam* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_UnlockCard : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_UnlockCard() {
      ::grpc::Service::MarkMethodCallback(15,
          new ::grpc::internal::CallbackUnaryHandler< ::GNSRPC::GNSBadgeDataParam, ::GNSRPC::Text>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::GNSRPC::GNSBadgeDataParam* request, ::GNSRPC::Text* response) { return this->UnlockCard(context, request, response); }));}
    void SetMessageAllocatorFor_UnlockCard(
        ::grpc::MessageAllocator< ::GNSRPC::GNSBadgeDataParam, ::GNSRPC::Text>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(15);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::GNSRPC::GNSBadgeDataParam, ::GNSRPC::Text>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_UnlockCard() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UnlockCard(::grpc::ServerContext* /*context*/, const ::GNSRPC::GNSBadgeDataParam* /*request*/, ::GNSRPC::Text* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UnlockCard(
      ::grpc::CallbackServerContext* /*context*/, const ::GNSRPC::GNSBadgeDataParam* /*request*/, ::GNSRPC::Text* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Execute : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Execute() {
      ::grpc::Service::MarkMethodCallback(16,
          new ::grpc::internal::CallbackUnaryHandler< ::GNSRPC::Text, ::GNSRPC::GNSBadgeDataParam>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::GNSRPC::Text* request, ::GNSRPC::GNSBadgeDataParam* response) { return this->Execute(context, request, response); }));}
    void SetMessageAllocatorFor_Execute(
        ::grpc::MessageAllocator< ::GNSRPC::Text, ::GNSRPC::GNSBadgeDataParam>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(16);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::GNSRPC::Text, ::GNSRPC::GNSBadgeDataParam>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Execute() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Execute(::grpc::ServerContext* /*context*/, const ::GNSRPC::Text* /*request*/, ::GNSRPC::GNSBadgeDataParam* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Execute(
      ::grpc::CallbackServerContext* /*context*/, const ::GNSRPC::Text* /*request*/, ::GNSRPC::GNSBadgeDataParam* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_ReadUUID<WithCallbackMethod_ReadUUIDZone2<WithCallbackMethod_StoreUUID<WithCallbackMethod_FormatCard<WithCallbackMethod_GetFreeSites<WithCallbackMethod_GetFreeWinCreds<WithCallbackMethod_ReadSiteCreds<WithCallbackMethod_ReadSiteCred<WithCallbackMethod_ReadWinCreds<WithCallbackMethod_ReadWinCred<WithCallbackMethod_DeleteSiteCred<WithCallbackMethod_DeleteWinCred<WithCallbackMethod_WriteSiteCred<WithCallbackMethod_WriteWinCred<WithCallbackMethod_StreamCardStatus<WithCallbackMethod_UnlockCard<WithCallbackMethod_Execute<Service > > > > > > > > > > > > > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_ReadUUID : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ReadUUID() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_ReadUUID() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReadUUID(::grpc::ServerContext* /*context*/, const ::GNSRPC::GNSBadgeDataParam* /*request*/, ::GNSRPC::UUID* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ReadUUIDZone2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ReadUUIDZone2() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_ReadUUIDZone2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReadUUIDZone2(::grpc::ServerContext* /*context*/, const ::GNSRPC::GNSBadgeDataParam* /*request*/, ::GNSRPC::UUID* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_StoreUUID : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_StoreUUID() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_StoreUUID() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StoreUUID(::grpc::ServerContext* /*context*/, const ::GNSRPC::GNSBadgeDataParam* /*request*/, ::GNSRPC::GNSBadgeDataParam* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_FormatCard : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_FormatCard() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_FormatCard() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FormatCard(::grpc::ServerContext* /*context*/, const ::GNSRPC::UUID* /*request*/, ::GNSRPC::GNSBadgeDataParam* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetFreeSites : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetFreeSites() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_GetFreeSites() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetFreeSites(::grpc::ServerContext* /*context*/, const ::GNSRPC::GNSBadgeDataParam* /*request*/, ::GNSRPC::FreeSites* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetFreeWinCreds : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetFreeWinCreds() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_GetFreeWinCreds() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetFreeWinCreds(::grpc::ServerContext* /*context*/, const ::GNSRPC::GNSBadgeDataParam* /*request*/, ::GNSRPC::FreeWinCreds* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ReadSiteCreds : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ReadSiteCreds() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_ReadSiteCreds() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReadSiteCreds(::grpc::ServerContext* /*context*/, const ::GNSRPC::GNSBadgeDataParam* /*request*/, ::GNSRPC::Sites* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ReadSiteCred : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ReadSiteCred() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_ReadSiteCred() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReadSiteCred(::grpc::ServerContext* /*context*/, const ::GNSRPC::SiteCred* /*request*/, ::GNSRPC::SiteCred* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ReadWinCreds : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ReadWinCreds() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_ReadWinCreds() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReadWinCreds(::grpc::ServerContext* /*context*/, const ::GNSRPC::GNSBadgeDataParam* /*request*/, ::GNSRPC::WinCreds* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ReadWinCred : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ReadWinCred() {
      ::grpc::Service::MarkMethodGeneric(9);
    }
    ~WithGenericMethod_ReadWinCred() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReadWinCred(::grpc::ServerContext* /*context*/, const ::GNSRPC::WinCred* /*request*/, ::GNSRPC::WinCred* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteSiteCred : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DeleteSiteCred() {
      ::grpc::Service::MarkMethodGeneric(10);
    }
    ~WithGenericMethod_DeleteSiteCred() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteSiteCred(::grpc::ServerContext* /*context*/, const ::GNSRPC::SiteCred* /*request*/, ::GNSRPC::GNSBadgeDataParam* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteWinCred : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DeleteWinCred() {
      ::grpc::Service::MarkMethodGeneric(11);
    }
    ~WithGenericMethod_DeleteWinCred() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteWinCred(::grpc::ServerContext* /*context*/, const ::GNSRPC::WinCred* /*request*/, ::GNSRPC::GNSBadgeDataParam* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_WriteSiteCred : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_WriteSiteCred() {
      ::grpc::Service::MarkMethodGeneric(12);
    }
    ~WithGenericMethod_WriteSiteCred() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status WriteSiteCred(::grpc::ServerContext* /*context*/, const ::GNSRPC::SiteCred* /*request*/, ::GNSRPC::GNSBadgeDataParam* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_WriteWinCred : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_WriteWinCred() {
      ::grpc::Service::MarkMethodGeneric(13);
    }
    ~WithGenericMethod_WriteWinCred() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status WriteWinCred(::grpc::ServerContext* /*context*/, const ::GNSRPC::WinCred* /*request*/, ::GNSRPC::GNSBadgeDataParam* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_StreamCardStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_StreamCardStatus() {
      ::grpc::Service::MarkMethodGeneric(14);
    }
    ~WithGenericMethod_StreamCardStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamCardStatus(::grpc::ServerContext* /*context*/, const ::GNSRPC::GNSBadgeDataParam* /*request*/, ::grpc::ServerWriter< ::GNSRPC::CardStatus>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UnlockCard : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UnlockCard() {
      ::grpc::Service::MarkMethodGeneric(15);
    }
    ~WithGenericMethod_UnlockCard() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UnlockCard(::grpc::ServerContext* /*context*/, const ::GNSRPC::GNSBadgeDataParam* /*request*/, ::GNSRPC::Text* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Execute : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Execute() {
      ::grpc::Service::MarkMethodGeneric(16);
    }
    ~WithGenericMethod_Execute() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Execute(::grpc::ServerContext* /*context*/, const ::GNSRPC::Text* /*request*/, ::GNSRPC::GNSBadgeDataParam* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_ReadUUID : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ReadUUID() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_ReadUUID() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReadUUID(::grpc::ServerContext* /*context*/, const ::GNSRPC::GNSBadgeDataParam* /*request*/, ::GNSRPC::UUID* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReadUUID(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ReadUUIDZone2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ReadUUIDZone2() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_ReadUUIDZone2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReadUUIDZone2(::grpc::ServerContext* /*context*/, const ::GNSRPC::GNSBadgeDataParam* /*request*/, ::GNSRPC::UUID* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReadUUIDZone2(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_StoreUUID : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_StoreUUID() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_StoreUUID() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StoreUUID(::grpc::ServerContext* /*context*/, const ::GNSRPC::GNSBadgeDataParam* /*request*/, ::GNSRPC::GNSBadgeDataParam* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStoreUUID(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_FormatCard : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_FormatCard() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_FormatCard() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FormatCard(::grpc::ServerContext* /*context*/, const ::GNSRPC::UUID* /*request*/, ::GNSRPC::GNSBadgeDataParam* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestFormatCard(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetFreeSites : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetFreeSites() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_GetFreeSites() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetFreeSites(::grpc::ServerContext* /*context*/, const ::GNSRPC::GNSBadgeDataParam* /*request*/, ::GNSRPC::FreeSites* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetFreeSites(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetFreeWinCreds : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetFreeWinCreds() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_GetFreeWinCreds() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetFreeWinCreds(::grpc::ServerContext* /*context*/, const ::GNSRPC::GNSBadgeDataParam* /*request*/, ::GNSRPC::FreeWinCreds* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetFreeWinCreds(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ReadSiteCreds : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ReadSiteCreds() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_ReadSiteCreds() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReadSiteCreds(::grpc::ServerContext* /*context*/, const ::GNSRPC::GNSBadgeDataParam* /*request*/, ::GNSRPC::Sites* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReadSiteCreds(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ReadSiteCred : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ReadSiteCred() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_ReadSiteCred() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReadSiteCred(::grpc::ServerContext* /*context*/, const ::GNSRPC::SiteCred* /*request*/, ::GNSRPC::SiteCred* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReadSiteCred(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ReadWinCreds : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ReadWinCreds() {
      ::grpc::Service::MarkMethodRaw(8);
    }
    ~WithRawMethod_ReadWinCreds() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReadWinCreds(::grpc::ServerContext* /*context*/, const ::GNSRPC::GNSBadgeDataParam* /*request*/, ::GNSRPC::WinCreds* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReadWinCreds(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ReadWinCred : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ReadWinCred() {
      ::grpc::Service::MarkMethodRaw(9);
    }
    ~WithRawMethod_ReadWinCred() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReadWinCred(::grpc::ServerContext* /*context*/, const ::GNSRPC::WinCred* /*request*/, ::GNSRPC::WinCred* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReadWinCred(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeleteSiteCred : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DeleteSiteCred() {
      ::grpc::Service::MarkMethodRaw(10);
    }
    ~WithRawMethod_DeleteSiteCred() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteSiteCred(::grpc::ServerContext* /*context*/, const ::GNSRPC::SiteCred* /*request*/, ::GNSRPC::GNSBadgeDataParam* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteSiteCred(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeleteWinCred : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DeleteWinCred() {
      ::grpc::Service::MarkMethodRaw(11);
    }
    ~WithRawMethod_DeleteWinCred() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteWinCred(::grpc::ServerContext* /*context*/, const ::GNSRPC::WinCred* /*request*/, ::GNSRPC::GNSBadgeDataParam* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteWinCred(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_WriteSiteCred : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_WriteSiteCred() {
      ::grpc::Service::MarkMethodRaw(12);
    }
    ~WithRawMethod_WriteSiteCred() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status WriteSiteCred(::grpc::ServerContext* /*context*/, const ::GNSRPC::SiteCred* /*request*/, ::GNSRPC::GNSBadgeDataParam* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestWriteSiteCred(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(12, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_WriteWinCred : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_WriteWinCred() {
      ::grpc::Service::MarkMethodRaw(13);
    }
    ~WithRawMethod_WriteWinCred() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status WriteWinCred(::grpc::ServerContext* /*context*/, const ::GNSRPC::WinCred* /*request*/, ::GNSRPC::GNSBadgeDataParam* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestWriteWinCred(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(13, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_StreamCardStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_StreamCardStatus() {
      ::grpc::Service::MarkMethodRaw(14);
    }
    ~WithRawMethod_StreamCardStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamCardStatus(::grpc::ServerContext* /*context*/, const ::GNSRPC::GNSBadgeDataParam* /*request*/, ::grpc::ServerWriter< ::GNSRPC::CardStatus>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStreamCardStatus(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(14, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UnlockCard : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UnlockCard() {
      ::grpc::Service::MarkMethodRaw(15);
    }
    ~WithRawMethod_UnlockCard() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UnlockCard(::grpc::ServerContext* /*context*/, const ::GNSRPC::GNSBadgeDataParam* /*request*/, ::GNSRPC::Text* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUnlockCard(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(15, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Execute : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Execute() {
      ::grpc::Service::MarkMethodRaw(16);
    }
    ~WithRawMethod_Execute() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Execute(::grpc::ServerContext* /*context*/, const ::GNSRPC::Text* /*request*/, ::GNSRPC::GNSBadgeDataParam* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestExecute(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(16, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ReadUUID : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ReadUUID() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ReadUUID(context, request, response); }));
    }
    ~WithRawCallbackMethod_ReadUUID() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReadUUID(::grpc::ServerContext* /*context*/, const ::GNSRPC::GNSBadgeDataParam* /*request*/, ::GNSRPC::UUID* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ReadUUID(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ReadUUIDZone2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ReadUUIDZone2() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ReadUUIDZone2(context, request, response); }));
    }
    ~WithRawCallbackMethod_ReadUUIDZone2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReadUUIDZone2(::grpc::ServerContext* /*context*/, const ::GNSRPC::GNSBadgeDataParam* /*request*/, ::GNSRPC::UUID* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ReadUUIDZone2(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_StoreUUID : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_StoreUUID() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->StoreUUID(context, request, response); }));
    }
    ~WithRawCallbackMethod_StoreUUID() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StoreUUID(::grpc::ServerContext* /*context*/, const ::GNSRPC::GNSBadgeDataParam* /*request*/, ::GNSRPC::GNSBadgeDataParam* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* StoreUUID(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_FormatCard : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_FormatCard() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->FormatCard(context, request, response); }));
    }
    ~WithRawCallbackMethod_FormatCard() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FormatCard(::grpc::ServerContext* /*context*/, const ::GNSRPC::UUID* /*request*/, ::GNSRPC::GNSBadgeDataParam* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* FormatCard(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetFreeSites : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetFreeSites() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetFreeSites(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetFreeSites() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetFreeSites(::grpc::ServerContext* /*context*/, const ::GNSRPC::GNSBadgeDataParam* /*request*/, ::GNSRPC::FreeSites* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetFreeSites(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetFreeWinCreds : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetFreeWinCreds() {
      ::grpc::Service::MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetFreeWinCreds(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetFreeWinCreds() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetFreeWinCreds(::grpc::ServerContext* /*context*/, const ::GNSRPC::GNSBadgeDataParam* /*request*/, ::GNSRPC::FreeWinCreds* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetFreeWinCreds(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ReadSiteCreds : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ReadSiteCreds() {
      ::grpc::Service::MarkMethodRawCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ReadSiteCreds(context, request, response); }));
    }
    ~WithRawCallbackMethod_ReadSiteCreds() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReadSiteCreds(::grpc::ServerContext* /*context*/, const ::GNSRPC::GNSBadgeDataParam* /*request*/, ::GNSRPC::Sites* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ReadSiteCreds(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ReadSiteCred : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ReadSiteCred() {
      ::grpc::Service::MarkMethodRawCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ReadSiteCred(context, request, response); }));
    }
    ~WithRawCallbackMethod_ReadSiteCred() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReadSiteCred(::grpc::ServerContext* /*context*/, const ::GNSRPC::SiteCred* /*request*/, ::GNSRPC::SiteCred* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ReadSiteCred(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ReadWinCreds : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ReadWinCreds() {
      ::grpc::Service::MarkMethodRawCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ReadWinCreds(context, request, response); }));
    }
    ~WithRawCallbackMethod_ReadWinCreds() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReadWinCreds(::grpc::ServerContext* /*context*/, const ::GNSRPC::GNSBadgeDataParam* /*request*/, ::GNSRPC::WinCreds* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ReadWinCreds(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ReadWinCred : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ReadWinCred() {
      ::grpc::Service::MarkMethodRawCallback(9,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ReadWinCred(context, request, response); }));
    }
    ~WithRawCallbackMethod_ReadWinCred() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReadWinCred(::grpc::ServerContext* /*context*/, const ::GNSRPC::WinCred* /*request*/, ::GNSRPC::WinCred* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ReadWinCred(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DeleteSiteCred : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DeleteSiteCred() {
      ::grpc::Service::MarkMethodRawCallback(10,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DeleteSiteCred(context, request, response); }));
    }
    ~WithRawCallbackMethod_DeleteSiteCred() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteSiteCred(::grpc::ServerContext* /*context*/, const ::GNSRPC::SiteCred* /*request*/, ::GNSRPC::GNSBadgeDataParam* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteSiteCred(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DeleteWinCred : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DeleteWinCred() {
      ::grpc::Service::MarkMethodRawCallback(11,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DeleteWinCred(context, request, response); }));
    }
    ~WithRawCallbackMethod_DeleteWinCred() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteWinCred(::grpc::ServerContext* /*context*/, const ::GNSRPC::WinCred* /*request*/, ::GNSRPC::GNSBadgeDataParam* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteWinCred(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_WriteSiteCred : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_WriteSiteCred() {
      ::grpc::Service::MarkMethodRawCallback(12,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->WriteSiteCred(context, request, response); }));
    }
    ~WithRawCallbackMethod_WriteSiteCred() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status WriteSiteCred(::grpc::ServerContext* /*context*/, const ::GNSRPC::SiteCred* /*request*/, ::GNSRPC::GNSBadgeDataParam* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* WriteSiteCred(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_WriteWinCred : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_WriteWinCred() {
      ::grpc::Service::MarkMethodRawCallback(13,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->WriteWinCred(context, request, response); }));
    }
    ~WithRawCallbackMethod_WriteWinCred() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status WriteWinCred(::grpc::ServerContext* /*context*/, const ::GNSRPC::WinCred* /*request*/, ::GNSRPC::GNSBadgeDataParam* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* WriteWinCred(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_StreamCardStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_StreamCardStatus() {
      ::grpc::Service::MarkMethodRawCallback(14,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->StreamCardStatus(context, request); }));
    }
    ~WithRawCallbackMethod_StreamCardStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamCardStatus(::grpc::ServerContext* /*context*/, const ::GNSRPC::GNSBadgeDataParam* /*request*/, ::grpc::ServerWriter< ::GNSRPC::CardStatus>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* StreamCardStatus(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_UnlockCard : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_UnlockCard() {
      ::grpc::Service::MarkMethodRawCallback(15,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->UnlockCard(context, request, response); }));
    }
    ~WithRawCallbackMethod_UnlockCard() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UnlockCard(::grpc::ServerContext* /*context*/, const ::GNSRPC::GNSBadgeDataParam* /*request*/, ::GNSRPC::Text* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UnlockCard(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Execute : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Execute() {
      ::grpc::Service::MarkMethodRawCallback(16,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Execute(context, request, response); }));
    }
    ~WithRawCallbackMethod_Execute() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Execute(::grpc::ServerContext* /*context*/, const ::GNSRPC::Text* /*request*/, ::GNSRPC::GNSBadgeDataParam* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Execute(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ReadUUID : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ReadUUID() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::GNSRPC::GNSBadgeDataParam, ::GNSRPC::UUID>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::GNSRPC::GNSBadgeDataParam, ::GNSRPC::UUID>* streamer) {
                       return this->StreamedReadUUID(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ReadUUID() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ReadUUID(::grpc::ServerContext* /*context*/, const ::GNSRPC::GNSBadgeDataParam* /*request*/, ::GNSRPC::UUID* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedReadUUID(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::GNSRPC::GNSBadgeDataParam,::GNSRPC::UUID>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ReadUUIDZone2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ReadUUIDZone2() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::GNSRPC::GNSBadgeDataParam, ::GNSRPC::UUID>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::GNSRPC::GNSBadgeDataParam, ::GNSRPC::UUID>* streamer) {
                       return this->StreamedReadUUIDZone2(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ReadUUIDZone2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ReadUUIDZone2(::grpc::ServerContext* /*context*/, const ::GNSRPC::GNSBadgeDataParam* /*request*/, ::GNSRPC::UUID* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedReadUUIDZone2(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::GNSRPC::GNSBadgeDataParam,::GNSRPC::UUID>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_StoreUUID : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_StoreUUID() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::GNSRPC::GNSBadgeDataParam, ::GNSRPC::GNSBadgeDataParam>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::GNSRPC::GNSBadgeDataParam, ::GNSRPC::GNSBadgeDataParam>* streamer) {
                       return this->StreamedStoreUUID(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_StoreUUID() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status StoreUUID(::grpc::ServerContext* /*context*/, const ::GNSRPC::GNSBadgeDataParam* /*request*/, ::GNSRPC::GNSBadgeDataParam* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedStoreUUID(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::GNSRPC::GNSBadgeDataParam,::GNSRPC::GNSBadgeDataParam>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_FormatCard : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_FormatCard() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::GNSRPC::UUID, ::GNSRPC::GNSBadgeDataParam>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::GNSRPC::UUID, ::GNSRPC::GNSBadgeDataParam>* streamer) {
                       return this->StreamedFormatCard(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_FormatCard() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status FormatCard(::grpc::ServerContext* /*context*/, const ::GNSRPC::UUID* /*request*/, ::GNSRPC::GNSBadgeDataParam* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedFormatCard(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::GNSRPC::UUID,::GNSRPC::GNSBadgeDataParam>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetFreeSites : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetFreeSites() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::GNSRPC::GNSBadgeDataParam, ::GNSRPC::FreeSites>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::GNSRPC::GNSBadgeDataParam, ::GNSRPC::FreeSites>* streamer) {
                       return this->StreamedGetFreeSites(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetFreeSites() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetFreeSites(::grpc::ServerContext* /*context*/, const ::GNSRPC::GNSBadgeDataParam* /*request*/, ::GNSRPC::FreeSites* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetFreeSites(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::GNSRPC::GNSBadgeDataParam,::GNSRPC::FreeSites>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetFreeWinCreds : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetFreeWinCreds() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::GNSRPC::GNSBadgeDataParam, ::GNSRPC::FreeWinCreds>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::GNSRPC::GNSBadgeDataParam, ::GNSRPC::FreeWinCreds>* streamer) {
                       return this->StreamedGetFreeWinCreds(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetFreeWinCreds() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetFreeWinCreds(::grpc::ServerContext* /*context*/, const ::GNSRPC::GNSBadgeDataParam* /*request*/, ::GNSRPC::FreeWinCreds* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetFreeWinCreds(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::GNSRPC::GNSBadgeDataParam,::GNSRPC::FreeWinCreds>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ReadSiteCreds : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ReadSiteCreds() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler<
          ::GNSRPC::GNSBadgeDataParam, ::GNSRPC::Sites>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::GNSRPC::GNSBadgeDataParam, ::GNSRPC::Sites>* streamer) {
                       return this->StreamedReadSiteCreds(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ReadSiteCreds() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ReadSiteCreds(::grpc::ServerContext* /*context*/, const ::GNSRPC::GNSBadgeDataParam* /*request*/, ::GNSRPC::Sites* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedReadSiteCreds(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::GNSRPC::GNSBadgeDataParam,::GNSRPC::Sites>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ReadSiteCred : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ReadSiteCred() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler<
          ::GNSRPC::SiteCred, ::GNSRPC::SiteCred>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::GNSRPC::SiteCred, ::GNSRPC::SiteCred>* streamer) {
                       return this->StreamedReadSiteCred(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ReadSiteCred() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ReadSiteCred(::grpc::ServerContext* /*context*/, const ::GNSRPC::SiteCred* /*request*/, ::GNSRPC::SiteCred* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedReadSiteCred(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::GNSRPC::SiteCred,::GNSRPC::SiteCred>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ReadWinCreds : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ReadWinCreds() {
      ::grpc::Service::MarkMethodStreamed(8,
        new ::grpc::internal::StreamedUnaryHandler<
          ::GNSRPC::GNSBadgeDataParam, ::GNSRPC::WinCreds>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::GNSRPC::GNSBadgeDataParam, ::GNSRPC::WinCreds>* streamer) {
                       return this->StreamedReadWinCreds(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ReadWinCreds() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ReadWinCreds(::grpc::ServerContext* /*context*/, const ::GNSRPC::GNSBadgeDataParam* /*request*/, ::GNSRPC::WinCreds* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedReadWinCreds(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::GNSRPC::GNSBadgeDataParam,::GNSRPC::WinCreds>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ReadWinCred : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ReadWinCred() {
      ::grpc::Service::MarkMethodStreamed(9,
        new ::grpc::internal::StreamedUnaryHandler<
          ::GNSRPC::WinCred, ::GNSRPC::WinCred>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::GNSRPC::WinCred, ::GNSRPC::WinCred>* streamer) {
                       return this->StreamedReadWinCred(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ReadWinCred() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ReadWinCred(::grpc::ServerContext* /*context*/, const ::GNSRPC::WinCred* /*request*/, ::GNSRPC::WinCred* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedReadWinCred(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::GNSRPC::WinCred,::GNSRPC::WinCred>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteSiteCred : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DeleteSiteCred() {
      ::grpc::Service::MarkMethodStreamed(10,
        new ::grpc::internal::StreamedUnaryHandler<
          ::GNSRPC::SiteCred, ::GNSRPC::GNSBadgeDataParam>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::GNSRPC::SiteCred, ::GNSRPC::GNSBadgeDataParam>* streamer) {
                       return this->StreamedDeleteSiteCred(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DeleteSiteCred() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteSiteCred(::grpc::ServerContext* /*context*/, const ::GNSRPC::SiteCred* /*request*/, ::GNSRPC::GNSBadgeDataParam* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteSiteCred(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::GNSRPC::SiteCred,::GNSRPC::GNSBadgeDataParam>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteWinCred : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DeleteWinCred() {
      ::grpc::Service::MarkMethodStreamed(11,
        new ::grpc::internal::StreamedUnaryHandler<
          ::GNSRPC::WinCred, ::GNSRPC::GNSBadgeDataParam>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::GNSRPC::WinCred, ::GNSRPC::GNSBadgeDataParam>* streamer) {
                       return this->StreamedDeleteWinCred(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DeleteWinCred() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteWinCred(::grpc::ServerContext* /*context*/, const ::GNSRPC::WinCred* /*request*/, ::GNSRPC::GNSBadgeDataParam* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteWinCred(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::GNSRPC::WinCred,::GNSRPC::GNSBadgeDataParam>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_WriteSiteCred : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_WriteSiteCred() {
      ::grpc::Service::MarkMethodStreamed(12,
        new ::grpc::internal::StreamedUnaryHandler<
          ::GNSRPC::SiteCred, ::GNSRPC::GNSBadgeDataParam>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::GNSRPC::SiteCred, ::GNSRPC::GNSBadgeDataParam>* streamer) {
                       return this->StreamedWriteSiteCred(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_WriteSiteCred() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status WriteSiteCred(::grpc::ServerContext* /*context*/, const ::GNSRPC::SiteCred* /*request*/, ::GNSRPC::GNSBadgeDataParam* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedWriteSiteCred(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::GNSRPC::SiteCred,::GNSRPC::GNSBadgeDataParam>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_WriteWinCred : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_WriteWinCred() {
      ::grpc::Service::MarkMethodStreamed(13,
        new ::grpc::internal::StreamedUnaryHandler<
          ::GNSRPC::WinCred, ::GNSRPC::GNSBadgeDataParam>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::GNSRPC::WinCred, ::GNSRPC::GNSBadgeDataParam>* streamer) {
                       return this->StreamedWriteWinCred(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_WriteWinCred() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status WriteWinCred(::grpc::ServerContext* /*context*/, const ::GNSRPC::WinCred* /*request*/, ::GNSRPC::GNSBadgeDataParam* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedWriteWinCred(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::GNSRPC::WinCred,::GNSRPC::GNSBadgeDataParam>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UnlockCard : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_UnlockCard() {
      ::grpc::Service::MarkMethodStreamed(15,
        new ::grpc::internal::StreamedUnaryHandler<
          ::GNSRPC::GNSBadgeDataParam, ::GNSRPC::Text>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::GNSRPC::GNSBadgeDataParam, ::GNSRPC::Text>* streamer) {
                       return this->StreamedUnlockCard(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_UnlockCard() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UnlockCard(::grpc::ServerContext* /*context*/, const ::GNSRPC::GNSBadgeDataParam* /*request*/, ::GNSRPC::Text* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUnlockCard(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::GNSRPC::GNSBadgeDataParam,::GNSRPC::Text>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Execute : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Execute() {
      ::grpc::Service::MarkMethodStreamed(16,
        new ::grpc::internal::StreamedUnaryHandler<
          ::GNSRPC::Text, ::GNSRPC::GNSBadgeDataParam>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::GNSRPC::Text, ::GNSRPC::GNSBadgeDataParam>* streamer) {
                       return this->StreamedExecute(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Execute() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Execute(::grpc::ServerContext* /*context*/, const ::GNSRPC::Text* /*request*/, ::GNSRPC::GNSBadgeDataParam* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedExecute(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::GNSRPC::Text,::GNSRPC::GNSBadgeDataParam>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_ReadUUID<WithStreamedUnaryMethod_ReadUUIDZone2<WithStreamedUnaryMethod_StoreUUID<WithStreamedUnaryMethod_FormatCard<WithStreamedUnaryMethod_GetFreeSites<WithStreamedUnaryMethod_GetFreeWinCreds<WithStreamedUnaryMethod_ReadSiteCreds<WithStreamedUnaryMethod_ReadSiteCred<WithStreamedUnaryMethod_ReadWinCreds<WithStreamedUnaryMethod_ReadWinCred<WithStreamedUnaryMethod_DeleteSiteCred<WithStreamedUnaryMethod_DeleteWinCred<WithStreamedUnaryMethod_WriteSiteCred<WithStreamedUnaryMethod_WriteWinCred<WithStreamedUnaryMethod_UnlockCard<WithStreamedUnaryMethod_Execute<Service > > > > > > > > > > > > > > > > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_StreamCardStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_StreamCardStatus() {
      ::grpc::Service::MarkMethodStreamed(14,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::GNSRPC::GNSBadgeDataParam, ::GNSRPC::CardStatus>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::GNSRPC::GNSBadgeDataParam, ::GNSRPC::CardStatus>* streamer) {
                       return this->StreamedStreamCardStatus(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_StreamCardStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status StreamCardStatus(::grpc::ServerContext* /*context*/, const ::GNSRPC::GNSBadgeDataParam* /*request*/, ::grpc::ServerWriter< ::GNSRPC::CardStatus>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedStreamCardStatus(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::GNSRPC::GNSBadgeDataParam,::GNSRPC::CardStatus>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_StreamCardStatus<Service > SplitStreamedService;
  typedef WithStreamedUnaryMethod_ReadUUID<WithStreamedUnaryMethod_ReadUUIDZone2<WithStreamedUnaryMethod_StoreUUID<WithStreamedUnaryMethod_FormatCard<WithStreamedUnaryMethod_GetFreeSites<WithStreamedUnaryMethod_GetFreeWinCreds<WithStreamedUnaryMethod_ReadSiteCreds<WithStreamedUnaryMethod_ReadSiteCred<WithStreamedUnaryMethod_ReadWinCreds<WithStreamedUnaryMethod_ReadWinCred<WithStreamedUnaryMethod_DeleteSiteCred<WithStreamedUnaryMethod_DeleteWinCred<WithStreamedUnaryMethod_WriteSiteCred<WithStreamedUnaryMethod_WriteWinCred<WithSplitStreamingMethod_StreamCardStatus<WithStreamedUnaryMethod_UnlockCard<WithStreamedUnaryMethod_Execute<Service > > > > > > > > > > > > > > > > > StreamedService;
};

}  // namespace GNSRPC


#endif  // GRPC_gnsservice_2eproto__INCLUDED
