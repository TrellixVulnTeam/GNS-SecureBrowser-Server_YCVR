//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: gnsservice.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// Usage: instantiate `GNSRPC_GNSBadgeDataClient`, then call methods of this protocol to make API calls.
internal protocol GNSRPC_GNSBadgeDataClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: GNSRPC_GNSBadgeDataClientInterceptorFactoryProtocol? { get }

  func readUUID(
    _ request: GNSRPC_GNSBadgeDataParam,
    callOptions: CallOptions?
  ) -> UnaryCall<GNSRPC_GNSBadgeDataParam, GNSRPC_UUID>

  func readUUIDZone2(
    _ request: GNSRPC_GNSBadgeDataParam,
    callOptions: CallOptions?
  ) -> UnaryCall<GNSRPC_GNSBadgeDataParam, GNSRPC_UUID>

  func storeUUID(
    _ request: GNSRPC_GNSBadgeDataParam,
    callOptions: CallOptions?
  ) -> UnaryCall<GNSRPC_GNSBadgeDataParam, GNSRPC_GNSBadgeDataParam>

  func formatCard(
    _ request: GNSRPC_UUID,
    callOptions: CallOptions?
  ) -> UnaryCall<GNSRPC_UUID, GNSRPC_GNSBadgeDataParam>

  func getFreeSites(
    _ request: GNSRPC_GNSBadgeDataParam,
    callOptions: CallOptions?
  ) -> UnaryCall<GNSRPC_GNSBadgeDataParam, GNSRPC_FreeSites>

  func getFreeWinCreds(
    _ request: GNSRPC_GNSBadgeDataParam,
    callOptions: CallOptions?
  ) -> UnaryCall<GNSRPC_GNSBadgeDataParam, GNSRPC_FreeWinCreds>

  func readSiteCreds(
    _ request: GNSRPC_GNSBadgeDataParam,
    callOptions: CallOptions?
  ) -> UnaryCall<GNSRPC_GNSBadgeDataParam, GNSRPC_Sites>

  func readSiteCred(
    _ request: GNSRPC_SiteCred,
    callOptions: CallOptions?
  ) -> UnaryCall<GNSRPC_SiteCred, GNSRPC_SiteCred>

  func readWinCreds(
    _ request: GNSRPC_GNSBadgeDataParam,
    callOptions: CallOptions?
  ) -> UnaryCall<GNSRPC_GNSBadgeDataParam, GNSRPC_WinCreds>

  func readWinCred(
    _ request: GNSRPC_WinCred,
    callOptions: CallOptions?
  ) -> UnaryCall<GNSRPC_WinCred, GNSRPC_WinCred>

  func deleteSiteCred(
    _ request: GNSRPC_SiteCred,
    callOptions: CallOptions?
  ) -> UnaryCall<GNSRPC_SiteCred, GNSRPC_GNSBadgeDataParam>

  func deleteWinCred(
    _ request: GNSRPC_WinCred,
    callOptions: CallOptions?
  ) -> UnaryCall<GNSRPC_WinCred, GNSRPC_GNSBadgeDataParam>

  func writeSiteCred(
    _ request: GNSRPC_SiteCred,
    callOptions: CallOptions?
  ) -> UnaryCall<GNSRPC_SiteCred, GNSRPC_GNSBadgeDataParam>

  func writeWinCred(
    _ request: GNSRPC_WinCred,
    callOptions: CallOptions?
  ) -> UnaryCall<GNSRPC_WinCred, GNSRPC_GNSBadgeDataParam>

  func streamCardStatus(
    _ request: GNSRPC_GNSBadgeDataParam,
    callOptions: CallOptions?,
    handler: @escaping (GNSRPC_CardStatus) -> Void
  ) -> ServerStreamingCall<GNSRPC_GNSBadgeDataParam, GNSRPC_CardStatus>

  func unlockCard(
    _ request: GNSRPC_GNSBadgeDataParam,
    callOptions: CallOptions?
  ) -> UnaryCall<GNSRPC_GNSBadgeDataParam, GNSRPC_Text>

  func execute(
    _ request: GNSRPC_Text,
    callOptions: CallOptions?
  ) -> UnaryCall<GNSRPC_Text, GNSRPC_GNSBadgeDataParam>
}

extension GNSRPC_GNSBadgeDataClientProtocol {
  internal var serviceName: String {
    return "GNSRPC.GNSBadgeData"
  }

  /// Get HW UUID of card
  ///
  /// - Parameters:
  ///   - request: Request to send to ReadUUID.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func readUUID(
    _ request: GNSRPC_GNSBadgeDataParam,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<GNSRPC_GNSBadgeDataParam, GNSRPC_UUID> {
    return self.makeUnaryCall(
      path: "/GNSRPC.GNSBadgeData/ReadUUID",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeReadUUIDInterceptors() ?? []
    )
  }

  /// Get old UUID of card on Zone 2
  ///
  /// - Parameters:
  ///   - request: Request to send to ReadUUIDZone2.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func readUUIDZone2(
    _ request: GNSRPC_GNSBadgeDataParam,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<GNSRPC_GNSBadgeDataParam, GNSRPC_UUID> {
    return self.makeUnaryCall(
      path: "/GNSRPC.GNSBadgeData/ReadUUIDZone2",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeReadUUIDZone2Interceptors() ?? []
    )
  }

  /// Read HW UUID then store to Zone3
  ///
  /// - Parameters:
  ///   - request: Request to send to StoreUUID.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func storeUUID(
    _ request: GNSRPC_GNSBadgeDataParam,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<GNSRPC_GNSBadgeDataParam, GNSRPC_GNSBadgeDataParam> {
    return self.makeUnaryCall(
      path: "/GNSRPC.GNSBadgeData/StoreUUID",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeStoreUUIDInterceptors() ?? []
    )
  }

  /// Format card 0: sites + wincreds, 1: sites only, 2: wincreds
  ///
  /// - Parameters:
  ///   - request: Request to send to FormatCard.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func formatCard(
    _ request: GNSRPC_UUID,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<GNSRPC_UUID, GNSRPC_GNSBadgeDataParam> {
    return self.makeUnaryCall(
      path: "/GNSRPC.GNSBadgeData/FormatCard",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeFormatCardInterceptors() ?? []
    )
  }

  /// Get available free indexes for sites (32 max)
  ///
  /// - Parameters:
  ///   - request: Request to send to GetFreeSites.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getFreeSites(
    _ request: GNSRPC_GNSBadgeDataParam,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<GNSRPC_GNSBadgeDataParam, GNSRPC_FreeSites> {
    return self.makeUnaryCall(
      path: "/GNSRPC.GNSBadgeData/GetFreeSites",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetFreeSitesInterceptors() ?? []
    )
  }

  /// Get available windows credential (8 max)
  ///
  /// - Parameters:
  ///   - request: Request to send to GetFreeWinCreds.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getFreeWinCreds(
    _ request: GNSRPC_GNSBadgeDataParam,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<GNSRPC_GNSBadgeDataParam, GNSRPC_FreeWinCreds> {
    return self.makeUnaryCall(
      path: "/GNSRPC.GNSBadgeData/GetFreeWinCreds",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetFreeWinCredsInterceptors() ?? []
    )
  }

  /// Read site credentials from badge
  ///
  /// - Parameters:
  ///   - request: Request to send to ReadSiteCreds.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func readSiteCreds(
    _ request: GNSRPC_GNSBadgeDataParam,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<GNSRPC_GNSBadgeDataParam, GNSRPC_Sites> {
    return self.makeUnaryCall(
      path: "/GNSRPC.GNSBadgeData/ReadSiteCreds",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeReadSiteCredsInterceptors() ?? []
    )
  }

  /// read 1 site cred
  ///
  /// - Parameters:
  ///   - request: Request to send to ReadSiteCred.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func readSiteCred(
    _ request: GNSRPC_SiteCred,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<GNSRPC_SiteCred, GNSRPC_SiteCred> {
    return self.makeUnaryCall(
      path: "/GNSRPC.GNSBadgeData/ReadSiteCred",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeReadSiteCredInterceptors() ?? []
    )
  }

  /// Read windows credentials from badge
  ///
  /// - Parameters:
  ///   - request: Request to send to ReadWinCreds.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func readWinCreds(
    _ request: GNSRPC_GNSBadgeDataParam,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<GNSRPC_GNSBadgeDataParam, GNSRPC_WinCreds> {
    return self.makeUnaryCall(
      path: "/GNSRPC.GNSBadgeData/ReadWinCreds",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeReadWinCredsInterceptors() ?? []
    )
  }

  /// Read 1 windows credential from badge
  ///
  /// - Parameters:
  ///   - request: Request to send to ReadWinCred.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func readWinCred(
    _ request: GNSRPC_WinCred,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<GNSRPC_WinCred, GNSRPC_WinCred> {
    return self.makeUnaryCall(
      path: "/GNSRPC.GNSBadgeData/ReadWinCred",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeReadWinCredInterceptors() ?? []
    )
  }

  /// Delete 1 site credential
  ///
  /// - Parameters:
  ///   - request: Request to send to DeleteSiteCred.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func deleteSiteCred(
    _ request: GNSRPC_SiteCred,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<GNSRPC_SiteCred, GNSRPC_GNSBadgeDataParam> {
    return self.makeUnaryCall(
      path: "/GNSRPC.GNSBadgeData/DeleteSiteCred",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeleteSiteCredInterceptors() ?? []
    )
  }

  /// Delete 1 Windows credential
  ///
  /// - Parameters:
  ///   - request: Request to send to DeleteWinCred.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func deleteWinCred(
    _ request: GNSRPC_WinCred,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<GNSRPC_WinCred, GNSRPC_GNSBadgeDataParam> {
    return self.makeUnaryCall(
      path: "/GNSRPC.GNSBadgeData/DeleteWinCred",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeleteWinCredInterceptors() ?? []
    )
  }

  /// Write a site credential at location of offset
  ///
  /// - Parameters:
  ///   - request: Request to send to WriteSiteCred.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func writeSiteCred(
    _ request: GNSRPC_SiteCred,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<GNSRPC_SiteCred, GNSRPC_GNSBadgeDataParam> {
    return self.makeUnaryCall(
      path: "/GNSRPC.GNSBadgeData/WriteSiteCred",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeWriteSiteCredInterceptors() ?? []
    )
  }

  /// Write a windows credential at location of idx
  ///
  /// - Parameters:
  ///   - request: Request to send to WriteWinCred.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func writeWinCred(
    _ request: GNSRPC_WinCred,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<GNSRPC_WinCred, GNSRPC_GNSBadgeDataParam> {
    return self.makeUnaryCall(
      path: "/GNSRPC.GNSBadgeData/WriteWinCred",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeWriteWinCredInterceptors() ?? []
    )
  }

  /// Ping-pong like in-out data stream to report CardStatus changes to RPC
  /// client
  ///
  /// - Parameters:
  ///   - request: Request to send to StreamCardStatus.
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  internal func streamCardStatus(
    _ request: GNSRPC_GNSBadgeDataParam,
    callOptions: CallOptions? = nil,
    handler: @escaping (GNSRPC_CardStatus) -> Void
  ) -> ServerStreamingCall<GNSRPC_GNSBadgeDataParam, GNSRPC_CardStatus> {
    return self.makeServerStreamingCall(
      path: "/GNSRPC.GNSBadgeData/StreamCardStatus",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeStreamCardStatusInterceptors() ?? [],
      handler: handler
    )
  }

  /// Unlock card and receive hardware UUID
  ///
  /// - Parameters:
  ///   - request: Request to send to UnlockCard.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func unlockCard(
    _ request: GNSRPC_GNSBadgeDataParam,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<GNSRPC_GNSBadgeDataParam, GNSRPC_Text> {
    return self.makeUnaryCall(
      path: "/GNSRPC.GNSBadgeData/UnlockCard",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUnlockCardInterceptors() ?? []
    )
  }

  /// arbitrary client to server command to implement commands like switching
  /// between USB vs NFC
  ///
  /// - Parameters:
  ///   - request: Request to send to Execute.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func execute(
    _ request: GNSRPC_Text,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<GNSRPC_Text, GNSRPC_GNSBadgeDataParam> {
    return self.makeUnaryCall(
      path: "/GNSRPC.GNSBadgeData/Execute",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeExecuteInterceptors() ?? []
    )
  }
}

internal protocol GNSRPC_GNSBadgeDataClientInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when invoking 'readUUID'.
  func makeReadUUIDInterceptors() -> [ClientInterceptor<GNSRPC_GNSBadgeDataParam, GNSRPC_UUID>]

  /// - Returns: Interceptors to use when invoking 'readUUIDZone2'.
  func makeReadUUIDZone2Interceptors() -> [ClientInterceptor<GNSRPC_GNSBadgeDataParam, GNSRPC_UUID>]

  /// - Returns: Interceptors to use when invoking 'storeUUID'.
  func makeStoreUUIDInterceptors() -> [ClientInterceptor<GNSRPC_GNSBadgeDataParam, GNSRPC_GNSBadgeDataParam>]

  /// - Returns: Interceptors to use when invoking 'formatCard'.
  func makeFormatCardInterceptors() -> [ClientInterceptor<GNSRPC_UUID, GNSRPC_GNSBadgeDataParam>]

  /// - Returns: Interceptors to use when invoking 'getFreeSites'.
  func makeGetFreeSitesInterceptors() -> [ClientInterceptor<GNSRPC_GNSBadgeDataParam, GNSRPC_FreeSites>]

  /// - Returns: Interceptors to use when invoking 'getFreeWinCreds'.
  func makeGetFreeWinCredsInterceptors() -> [ClientInterceptor<GNSRPC_GNSBadgeDataParam, GNSRPC_FreeWinCreds>]

  /// - Returns: Interceptors to use when invoking 'readSiteCreds'.
  func makeReadSiteCredsInterceptors() -> [ClientInterceptor<GNSRPC_GNSBadgeDataParam, GNSRPC_Sites>]

  /// - Returns: Interceptors to use when invoking 'readSiteCred'.
  func makeReadSiteCredInterceptors() -> [ClientInterceptor<GNSRPC_SiteCred, GNSRPC_SiteCred>]

  /// - Returns: Interceptors to use when invoking 'readWinCreds'.
  func makeReadWinCredsInterceptors() -> [ClientInterceptor<GNSRPC_GNSBadgeDataParam, GNSRPC_WinCreds>]

  /// - Returns: Interceptors to use when invoking 'readWinCred'.
  func makeReadWinCredInterceptors() -> [ClientInterceptor<GNSRPC_WinCred, GNSRPC_WinCred>]

  /// - Returns: Interceptors to use when invoking 'deleteSiteCred'.
  func makeDeleteSiteCredInterceptors() -> [ClientInterceptor<GNSRPC_SiteCred, GNSRPC_GNSBadgeDataParam>]

  /// - Returns: Interceptors to use when invoking 'deleteWinCred'.
  func makeDeleteWinCredInterceptors() -> [ClientInterceptor<GNSRPC_WinCred, GNSRPC_GNSBadgeDataParam>]

  /// - Returns: Interceptors to use when invoking 'writeSiteCred'.
  func makeWriteSiteCredInterceptors() -> [ClientInterceptor<GNSRPC_SiteCred, GNSRPC_GNSBadgeDataParam>]

  /// - Returns: Interceptors to use when invoking 'writeWinCred'.
  func makeWriteWinCredInterceptors() -> [ClientInterceptor<GNSRPC_WinCred, GNSRPC_GNSBadgeDataParam>]

  /// - Returns: Interceptors to use when invoking 'streamCardStatus'.
  func makeStreamCardStatusInterceptors() -> [ClientInterceptor<GNSRPC_GNSBadgeDataParam, GNSRPC_CardStatus>]

  /// - Returns: Interceptors to use when invoking 'unlockCard'.
  func makeUnlockCardInterceptors() -> [ClientInterceptor<GNSRPC_GNSBadgeDataParam, GNSRPC_Text>]

  /// - Returns: Interceptors to use when invoking 'execute'.
  func makeExecuteInterceptors() -> [ClientInterceptor<GNSRPC_Text, GNSRPC_GNSBadgeDataParam>]
}

internal final class GNSRPC_GNSBadgeDataClient: GNSRPC_GNSBadgeDataClientProtocol {
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: GNSRPC_GNSBadgeDataClientInterceptorFactoryProtocol?

  /// Creates a client for the GNSRPC.GNSBadgeData service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: GNSRPC_GNSBadgeDataClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

