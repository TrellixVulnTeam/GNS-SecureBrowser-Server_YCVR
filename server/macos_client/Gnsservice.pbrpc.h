// Code generated by gRPC proto compiler.  DO NOT EDIT!
// source: gnsservice.proto

#import <Foundation/Foundation.h>

#if !defined(GPB_GRPC_FORWARD_DECLARE_MESSAGE_PROTO) || !GPB_GRPC_FORWARD_DECLARE_MESSAGE_PROTO
#import "Gnsservice.pbobjc.h"
#endif

#if !defined(GPB_GRPC_PROTOCOL_ONLY) || !GPB_GRPC_PROTOCOL_ONLY
#import <ProtoRPC/ProtoService.h>
#import <ProtoRPC/ProtoRPCLegacy.h>
#import <RxLibrary/GRXWriteable.h>
#import <RxLibrary/GRXWriter.h>
#endif

@class GNSRPCCardStatus;
@class GNSRPCFreeSites;
@class GNSRPCFreeWinCreds;
@class GNSRPCGNSBadgeDataParam;
@class GNSRPCSiteCred;
@class GNSRPCSites;
@class GNSRPCText;
@class GNSRPCUUID;
@class GNSRPCWinCred;
@class GNSRPCWinCreds;

#if !defined(GPB_GRPC_FORWARD_DECLARE_MESSAGE_PROTO) || !GPB_GRPC_FORWARD_DECLARE_MESSAGE_PROTO
#endif

@class GRPCUnaryProtoCall;
@class GRPCStreamingProtoCall;
@class GRPCCallOptions;
@protocol GRPCProtoResponseHandler;
@class GRPCProtoCall;


NS_ASSUME_NONNULL_BEGIN

@protocol GNSRPCGNSBadgeData2 <NSObject>

#pragma mark ReadUUID(GNSBadgeDataParam) returns (UUID)

/**
 * Get UUID of card
 */
- (GRPCUnaryProtoCall *)readUUIDWithMessage:(GNSRPCGNSBadgeDataParam *)message responseHandler:(id<GRPCProtoResponseHandler>)handler callOptions:(GRPCCallOptions *_Nullable)callOptions;

#pragma mark FormatCard(UUID) returns (GNSBadgeDataParam)

/**
 * Format card 0: sites + wincreds, 1: sites only, 2: wincreds
 */
- (GRPCUnaryProtoCall *)formatCardWithMessage:(GNSRPCUUID *)message responseHandler:(id<GRPCProtoResponseHandler>)handler callOptions:(GRPCCallOptions *_Nullable)callOptions;

#pragma mark GetFreeSites(GNSBadgeDataParam) returns (FreeSites)

/**
 * Get available free indexes for sites (32 max)
 */
- (GRPCUnaryProtoCall *)getFreeSitesWithMessage:(GNSRPCGNSBadgeDataParam *)message responseHandler:(id<GRPCProtoResponseHandler>)handler callOptions:(GRPCCallOptions *_Nullable)callOptions;

#pragma mark GetFreeWinCreds(GNSBadgeDataParam) returns (FreeWinCreds)

/**
 * Get available windows credential (8 max)
 */
- (GRPCUnaryProtoCall *)getFreeWinCredsWithMessage:(GNSRPCGNSBadgeDataParam *)message responseHandler:(id<GRPCProtoResponseHandler>)handler callOptions:(GRPCCallOptions *_Nullable)callOptions;

#pragma mark ReadSiteCreds(GNSBadgeDataParam) returns (Sites)

/**
 * Read site credentials from badge
 */
- (GRPCUnaryProtoCall *)readSiteCredsWithMessage:(GNSRPCGNSBadgeDataParam *)message responseHandler:(id<GRPCProtoResponseHandler>)handler callOptions:(GRPCCallOptions *_Nullable)callOptions;

#pragma mark ReadWinCreds(GNSBadgeDataParam) returns (WinCreds)

/**
 * Read windows credentials from badge
 */
- (GRPCUnaryProtoCall *)readWinCredsWithMessage:(GNSRPCGNSBadgeDataParam *)message responseHandler:(id<GRPCProtoResponseHandler>)handler callOptions:(GRPCCallOptions *_Nullable)callOptions;

#pragma mark DeleteSiteCred(SiteCred) returns (GNSBadgeDataParam)

/**
 * Delete 1 site credential
 */
- (GRPCUnaryProtoCall *)deleteSiteCredWithMessage:(GNSRPCSiteCred *)message responseHandler:(id<GRPCProtoResponseHandler>)handler callOptions:(GRPCCallOptions *_Nullable)callOptions;

#pragma mark DeleteWinCred(WinCred) returns (GNSBadgeDataParam)

/**
 * Delete 1 Windows credential
 */
- (GRPCUnaryProtoCall *)deleteWinCredWithMessage:(GNSRPCWinCred *)message responseHandler:(id<GRPCProtoResponseHandler>)handler callOptions:(GRPCCallOptions *_Nullable)callOptions;

#pragma mark WriteSiteCred(SiteCred) returns (GNSBadgeDataParam)

/**
 * Write a site credential at location of offset
 */
- (GRPCUnaryProtoCall *)writeSiteCredWithMessage:(GNSRPCSiteCred *)message responseHandler:(id<GRPCProtoResponseHandler>)handler callOptions:(GRPCCallOptions *_Nullable)callOptions;

#pragma mark WriteWinCred(WinCred) returns (GNSBadgeDataParam)

/**
 * Write a windows credential at location of idx
 */
- (GRPCUnaryProtoCall *)writeWinCredWithMessage:(GNSRPCWinCred *)message responseHandler:(id<GRPCProtoResponseHandler>)handler callOptions:(GRPCCallOptions *_Nullable)callOptions;

#pragma mark StreamCardStatus(GNSBadgeDataParam) returns (stream CardStatus)

/**
 * Ping-pong like in-out data stream to report CardStatus changes to RPC
 * client
 */
- (GRPCUnaryProtoCall *)streamCardStatusWithMessage:(GNSRPCGNSBadgeDataParam *)message responseHandler:(id<GRPCProtoResponseHandler>)handler callOptions:(GRPCCallOptions *_Nullable)callOptions;

#pragma mark UnlockCard(GNSBadgeDataParam) returns (Text)

- (GRPCUnaryProtoCall *)unlockCardWithMessage:(GNSRPCGNSBadgeDataParam *)message responseHandler:(id<GRPCProtoResponseHandler>)handler callOptions:(GRPCCallOptions *_Nullable)callOptions;

#pragma mark Execute(Text) returns (GNSBadgeDataParam)

/**
 * arbitrary client to server command to implement commands like switching
 * between USB vs NFC
 */
- (GRPCUnaryProtoCall *)executeWithMessage:(GNSRPCText *)message responseHandler:(id<GRPCProtoResponseHandler>)handler callOptions:(GRPCCallOptions *_Nullable)callOptions;

@end

/**
 * The methods in this protocol belong to a set of old APIs that have been deprecated. They do not
 * recognize call options provided in the initializer. Using the v2 protocol is recommended.
 */
@protocol GNSRPCGNSBadgeData <NSObject>

#pragma mark ReadUUID(GNSBadgeDataParam) returns (UUID)

/**
 * Get UUID of card
 *
 * This method belongs to a set of APIs that have been deprecated. Using the v2 API is recommended.
 */
- (void)readUUIDWithRequest:(GNSRPCGNSBadgeDataParam *)request handler:(void(^)(GNSRPCUUID *_Nullable response, NSError *_Nullable error))handler;

/**
 * Get UUID of card
 *
 * This method belongs to a set of APIs that have been deprecated. Using the v2 API is recommended.
 */
- (GRPCProtoCall *)RPCToReadUUIDWithRequest:(GNSRPCGNSBadgeDataParam *)request handler:(void(^)(GNSRPCUUID *_Nullable response, NSError *_Nullable error))handler;


#pragma mark FormatCard(UUID) returns (GNSBadgeDataParam)

/**
 * Format card 0: sites + wincreds, 1: sites only, 2: wincreds
 *
 * This method belongs to a set of APIs that have been deprecated. Using the v2 API is recommended.
 */
- (void)formatCardWithRequest:(GNSRPCUUID *)request handler:(void(^)(GNSRPCGNSBadgeDataParam *_Nullable response, NSError *_Nullable error))handler;

/**
 * Format card 0: sites + wincreds, 1: sites only, 2: wincreds
 *
 * This method belongs to a set of APIs that have been deprecated. Using the v2 API is recommended.
 */
- (GRPCProtoCall *)RPCToFormatCardWithRequest:(GNSRPCUUID *)request handler:(void(^)(GNSRPCGNSBadgeDataParam *_Nullable response, NSError *_Nullable error))handler;


#pragma mark GetFreeSites(GNSBadgeDataParam) returns (FreeSites)

/**
 * Get available free indexes for sites (32 max)
 *
 * This method belongs to a set of APIs that have been deprecated. Using the v2 API is recommended.
 */
- (void)getFreeSitesWithRequest:(GNSRPCGNSBadgeDataParam *)request handler:(void(^)(GNSRPCFreeSites *_Nullable response, NSError *_Nullable error))handler;

/**
 * Get available free indexes for sites (32 max)
 *
 * This method belongs to a set of APIs that have been deprecated. Using the v2 API is recommended.
 */
- (GRPCProtoCall *)RPCToGetFreeSitesWithRequest:(GNSRPCGNSBadgeDataParam *)request handler:(void(^)(GNSRPCFreeSites *_Nullable response, NSError *_Nullable error))handler;


#pragma mark GetFreeWinCreds(GNSBadgeDataParam) returns (FreeWinCreds)

/**
 * Get available windows credential (8 max)
 *
 * This method belongs to a set of APIs that have been deprecated. Using the v2 API is recommended.
 */
- (void)getFreeWinCredsWithRequest:(GNSRPCGNSBadgeDataParam *)request handler:(void(^)(GNSRPCFreeWinCreds *_Nullable response, NSError *_Nullable error))handler;

/**
 * Get available windows credential (8 max)
 *
 * This method belongs to a set of APIs that have been deprecated. Using the v2 API is recommended.
 */
- (GRPCProtoCall *)RPCToGetFreeWinCredsWithRequest:(GNSRPCGNSBadgeDataParam *)request handler:(void(^)(GNSRPCFreeWinCreds *_Nullable response, NSError *_Nullable error))handler;


#pragma mark ReadSiteCreds(GNSBadgeDataParam) returns (Sites)

/**
 * Read site credentials from badge
 *
 * This method belongs to a set of APIs that have been deprecated. Using the v2 API is recommended.
 */
- (void)readSiteCredsWithRequest:(GNSRPCGNSBadgeDataParam *)request handler:(void(^)(GNSRPCSites *_Nullable response, NSError *_Nullable error))handler;

/**
 * Read site credentials from badge
 *
 * This method belongs to a set of APIs that have been deprecated. Using the v2 API is recommended.
 */
- (GRPCProtoCall *)RPCToReadSiteCredsWithRequest:(GNSRPCGNSBadgeDataParam *)request handler:(void(^)(GNSRPCSites *_Nullable response, NSError *_Nullable error))handler;


#pragma mark ReadWinCreds(GNSBadgeDataParam) returns (WinCreds)

/**
 * Read windows credentials from badge
 *
 * This method belongs to a set of APIs that have been deprecated. Using the v2 API is recommended.
 */
- (void)readWinCredsWithRequest:(GNSRPCGNSBadgeDataParam *)request handler:(void(^)(GNSRPCWinCreds *_Nullable response, NSError *_Nullable error))handler;

/**
 * Read windows credentials from badge
 *
 * This method belongs to a set of APIs that have been deprecated. Using the v2 API is recommended.
 */
- (GRPCProtoCall *)RPCToReadWinCredsWithRequest:(GNSRPCGNSBadgeDataParam *)request handler:(void(^)(GNSRPCWinCreds *_Nullable response, NSError *_Nullable error))handler;


#pragma mark DeleteSiteCred(SiteCred) returns (GNSBadgeDataParam)

/**
 * Delete 1 site credential
 *
 * This method belongs to a set of APIs that have been deprecated. Using the v2 API is recommended.
 */
- (void)deleteSiteCredWithRequest:(GNSRPCSiteCred *)request handler:(void(^)(GNSRPCGNSBadgeDataParam *_Nullable response, NSError *_Nullable error))handler;

/**
 * Delete 1 site credential
 *
 * This method belongs to a set of APIs that have been deprecated. Using the v2 API is recommended.
 */
- (GRPCProtoCall *)RPCToDeleteSiteCredWithRequest:(GNSRPCSiteCred *)request handler:(void(^)(GNSRPCGNSBadgeDataParam *_Nullable response, NSError *_Nullable error))handler;


#pragma mark DeleteWinCred(WinCred) returns (GNSBadgeDataParam)

/**
 * Delete 1 Windows credential
 *
 * This method belongs to a set of APIs that have been deprecated. Using the v2 API is recommended.
 */
- (void)deleteWinCredWithRequest:(GNSRPCWinCred *)request handler:(void(^)(GNSRPCGNSBadgeDataParam *_Nullable response, NSError *_Nullable error))handler;

/**
 * Delete 1 Windows credential
 *
 * This method belongs to a set of APIs that have been deprecated. Using the v2 API is recommended.
 */
- (GRPCProtoCall *)RPCToDeleteWinCredWithRequest:(GNSRPCWinCred *)request handler:(void(^)(GNSRPCGNSBadgeDataParam *_Nullable response, NSError *_Nullable error))handler;


#pragma mark WriteSiteCred(SiteCred) returns (GNSBadgeDataParam)

/**
 * Write a site credential at location of offset
 *
 * This method belongs to a set of APIs that have been deprecated. Using the v2 API is recommended.
 */
- (void)writeSiteCredWithRequest:(GNSRPCSiteCred *)request handler:(void(^)(GNSRPCGNSBadgeDataParam *_Nullable response, NSError *_Nullable error))handler;

/**
 * Write a site credential at location of offset
 *
 * This method belongs to a set of APIs that have been deprecated. Using the v2 API is recommended.
 */
- (GRPCProtoCall *)RPCToWriteSiteCredWithRequest:(GNSRPCSiteCred *)request handler:(void(^)(GNSRPCGNSBadgeDataParam *_Nullable response, NSError *_Nullable error))handler;


#pragma mark WriteWinCred(WinCred) returns (GNSBadgeDataParam)

/**
 * Write a windows credential at location of idx
 *
 * This method belongs to a set of APIs that have been deprecated. Using the v2 API is recommended.
 */
- (void)writeWinCredWithRequest:(GNSRPCWinCred *)request handler:(void(^)(GNSRPCGNSBadgeDataParam *_Nullable response, NSError *_Nullable error))handler;

/**
 * Write a windows credential at location of idx
 *
 * This method belongs to a set of APIs that have been deprecated. Using the v2 API is recommended.
 */
- (GRPCProtoCall *)RPCToWriteWinCredWithRequest:(GNSRPCWinCred *)request handler:(void(^)(GNSRPCGNSBadgeDataParam *_Nullable response, NSError *_Nullable error))handler;


#pragma mark StreamCardStatus(GNSBadgeDataParam) returns (stream CardStatus)

/**
 * Ping-pong like in-out data stream to report CardStatus changes to RPC
 * client
 *
 * This method belongs to a set of APIs that have been deprecated. Using the v2 API is recommended.
 */
- (void)streamCardStatusWithRequest:(GNSRPCGNSBadgeDataParam *)request eventHandler:(void(^)(BOOL done, GNSRPCCardStatus *_Nullable response, NSError *_Nullable error))eventHandler;

/**
 * Ping-pong like in-out data stream to report CardStatus changes to RPC
 * client
 *
 * This method belongs to a set of APIs that have been deprecated. Using the v2 API is recommended.
 */
- (GRPCProtoCall *)RPCToStreamCardStatusWithRequest:(GNSRPCGNSBadgeDataParam *)request eventHandler:(void(^)(BOOL done, GNSRPCCardStatus *_Nullable response, NSError *_Nullable error))eventHandler;


#pragma mark UnlockCard(GNSBadgeDataParam) returns (Text)

- (void)unlockCardWithRequest:(GNSRPCGNSBadgeDataParam *)request handler:(void(^)(GNSRPCText *_Nullable response, NSError *_Nullable error))handler;

- (GRPCProtoCall *)RPCToUnlockCardWithRequest:(GNSRPCGNSBadgeDataParam *)request handler:(void(^)(GNSRPCText *_Nullable response, NSError *_Nullable error))handler;


#pragma mark Execute(Text) returns (GNSBadgeDataParam)

/**
 * arbitrary client to server command to implement commands like switching
 * between USB vs NFC
 *
 * This method belongs to a set of APIs that have been deprecated. Using the v2 API is recommended.
 */
- (void)executeWithRequest:(GNSRPCText *)request handler:(void(^)(GNSRPCGNSBadgeDataParam *_Nullable response, NSError *_Nullable error))handler;

/**
 * arbitrary client to server command to implement commands like switching
 * between USB vs NFC
 *
 * This method belongs to a set of APIs that have been deprecated. Using the v2 API is recommended.
 */
- (GRPCProtoCall *)RPCToExecuteWithRequest:(GNSRPCText *)request handler:(void(^)(GNSRPCGNSBadgeDataParam *_Nullable response, NSError *_Nullable error))handler;


@end


#if !defined(GPB_GRPC_PROTOCOL_ONLY) || !GPB_GRPC_PROTOCOL_ONLY
/**
 * Basic service implementation, over gRPC, that only does
 * marshalling and parsing.
 */
@interface GNSRPCGNSBadgeData : GRPCProtoService<GNSRPCGNSBadgeData2, GNSRPCGNSBadgeData>
- (instancetype)initWithHost:(NSString *)host callOptions:(GRPCCallOptions *_Nullable)callOptions NS_DESIGNATED_INITIALIZER;
+ (instancetype)serviceWithHost:(NSString *)host callOptions:(GRPCCallOptions *_Nullable)callOptions;
// The following methods belong to a set of old APIs that have been deprecated.
- (instancetype)initWithHost:(NSString *)host;
+ (instancetype)serviceWithHost:(NSString *)host;
@end
#endif

NS_ASSUME_NONNULL_END

